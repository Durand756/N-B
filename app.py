import os
import logging
import json
import random
from flask import Flask, request, jsonify
import requests
from datetime import datetime
from collections import defaultdict, deque
import threading
import time

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuration
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "nakamaverifytoken")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN", "")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY", "")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY", "")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID", "")  # Optionnel
ADMIN_IDS = set(id.strip() for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip())

# M√©moire et √©tat du jeu
user_memory = defaultdict(lambda: deque(maxlen=10))
user_list = set()
game_sessions = {}  # Pour le jeu Action ou V√©rit√©

class JSONBinStorage:
    """Classe pour g√©rer le stockage JSONBin.io"""
    
    def __init__(self, api_key, bin_id=None):
        self.api_key = api_key
        self.bin_id = bin_id
        self.base_url = "https://api.jsonbin.io/v3"
        self.headers = {
            "Content-Type": "application/json",
            "X-Master-Key": api_key
        }
    
    def create_bin(self, initial_data=None):
        """Cr√©er un nouveau bin JSONBin"""
        data = initial_data or {
            'user_memory': {},
            'user_list': [],
            'game_sessions': {},
            'timestamp': datetime.now().isoformat(),
            'version': '3.0',
            'creator': 'Durand'
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/b",
                headers=self.headers,
                json=data,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                self.bin_id = result['metadata']['id']
                logger.info(f"‚úÖ Nouveau bin JSONBin cr√©√©: {self.bin_id}")
                # Sauvegarder le bin_id pour la prochaine fois
                logger.info(f"üîë Ajoutez cette variable: JSONBIN_BIN_ID={self.bin_id}")
                return True
            else:
                logger.error(f"‚ùå Erreur cr√©ation bin: {response.status_code} - {response.text}")
                return False
                
        except requests.RequestException as e:
            logger.error(f"‚ùå Erreur r√©seau cr√©ation bin: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©rale cr√©ation bin: {e}")
            return False
    
    def save_data(self, data):
        """Sauvegarder les donn√©es sur JSONBin"""
        if not self.bin_id:
            logger.warning("Pas de bin_id, cr√©ation automatique...")
            if not self.create_bin(data):
                return False
        
        # Ajouter m√©tadonn√©es
        data_to_save = {
            **data,
            'timestamp': datetime.now().isoformat(),
            'version': '3.0',
            'creator': 'Durand'
        }
        
        try:
            response = requests.put(
                f"{self.base_url}/b/{self.bin_id}",
                headers=self.headers,
                json=data_to_save,
                timeout=15
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Donn√©es sauvegard√©es sur JSONBin")
                return True
            else:
                logger.error(f"‚ùå Erreur sauvegarde: {response.status_code} - {response.text}")
                return False
                
        except requests.RequestException as e:
            logger.error(f"‚ùå Erreur r√©seau sauvegarde: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©rale sauvegarde: {e}")
            return False
    
    def load_data(self):
        """Charger les donn√©es depuis JSONBin"""
        if not self.bin_id:
            logger.warning("Pas de bin_id configur√©")
            return None
        
        try:
            response = requests.get(
                f"{self.base_url}/b/{self.bin_id}/latest",
                headers=self.headers,
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()['record']
                logger.info(f"‚úÖ Donn√©es charg√©es depuis JSONBin (v{data.get('version', '1.0')})")
                return data
            else:
                logger.error(f"‚ùå Erreur chargement: {response.status_code} - {response.text}")
                return None
                
        except requests.RequestException as e:
            logger.error(f"‚ùå Erreur r√©seau chargement: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©rale chargement: {e}")
            return None
    
    def get_bin_info(self):
        """Obtenir les infos du bin"""
        if not self.bin_id:
            return None
        
        try:
            response = requests.get(
                f"{self.base_url}/b/{self.bin_id}",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()['metadata']
            return None
        except:
            return None

# Initialiser le stockage JSONBin
storage = None

def init_jsonbin_storage():
    """Initialiser le stockage JSONBin"""
    global storage
    
    if not JSONBIN_API_KEY:
        logger.error("‚ùå JSONBIN_API_KEY manquante dans les variables d'environnement")
        return False
    
    try:
        storage = JSONBinStorage(JSONBIN_API_KEY, JSONBIN_BIN_ID)
        
        # Tester la connexion
        if JSONBIN_BIN_ID:
            test_data = storage.load_data()
            if test_data is not None:
                logger.info("‚úÖ JSONBin connect√© avec succ√®s")
                return True
            else:
                logger.warning("‚ö†Ô∏è Bin ID invalide, cr√©ation d'un nouveau bin...")
        
        # Cr√©er un nouveau bin si n√©cessaire
        if storage.create_bin():
            logger.info("‚úÖ JSONBin initialis√© avec succ√®s")
            return True
        else:
            logger.error("‚ùå Impossible d'initialiser JSONBin")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation JSONBin: {e}")
        return False

def save_to_storage():
    """Sauvegarde vers JSONBin"""
    if not storage:
        logger.warning("Stockage JSONBin non initialis√©")
        return False
    
    try:
        data = {
            'user_memory': {k: list(v) for k, v in user_memory.items()},
            'user_list': list(user_list),
            'game_sessions': game_sessions
        }
        
        return storage.save_data(data)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde: {e}")
        return False

def load_from_storage():
    """Chargement depuis JSONBin"""
    global user_memory, user_list, game_sessions
    
    if not storage:
        logger.warning("Stockage JSONBin non initialis√©")
        return False
    
    try:
        data = storage.load_data()
        if not data:
            logger.info("üìÅ Aucune donn√©e √† charger")
            return False
        
        # Restaurer les donn√©es avec v√©rifications
        user_memory.clear()
        for user_id, messages in data.get('user_memory', {}).items():
            user_memory[user_id] = deque(messages, maxlen=10)
        
        user_list.clear()
        user_list.update(data.get('user_list', []))
        
        game_sessions.clear()
        game_sessions.update(data.get('game_sessions', {}))
        
        logger.info(f"üìä Charg√©: {len(user_list)} utilisateurs, {len(user_memory)} conversations, {len(game_sessions)} jeux")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement: {e}")
        return False

def auto_save():
    """Sauvegarde automatique am√©lior√©e"""
    save_interval = 300  # 5 minutes
    logger.info(f"üîÑ Auto-save JSONBin d√©marr√© (intervalle: {save_interval}s)")
    
    while True:
        time.sleep(save_interval)
        if user_memory or user_list or game_sessions:
            success = save_to_storage()
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"üîÑ Auto-save: {status}")

# API Mistral avec gestion am√©lior√©e
def call_mistral_api(messages, max_tokens=200, temperature=0.8):
    """Appel API Mistral optimis√©"""
    if not MISTRAL_API_KEY:
        logger.warning("Cl√© API Mistral manquante")
        return None
    
    headers = {
        "Content-Type": "application/json", 
        "Authorization": f"Bearer {MISTRAL_API_KEY}"
    }
    data = {
        "model": "mistral-small-latest",  # Mod√®le plus r√©cent
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature
    }
    
    try:
        response = requests.post(
            "https://api.mistral.ai/v1/chat/completions", 
            headers=headers, 
            json=data, 
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            logger.error(f"Erreur API Mistral: {response.status_code}")
            return None
            
    except requests.RequestException as e:
        logger.error(f"Erreur r√©seau Mistral: {e}")
        return None
    except Exception as e:
        logger.error(f"Erreur g√©n√©rale Mistral: {e}")
        return None

def add_to_memory(user_id, msg_type, content):
    """Ajouter √† la m√©moire avec sauvegarde async"""
    user_memory[user_id].append({
        'type': msg_type,
        'content': content,
        'timestamp': datetime.now().isoformat()
    })
    
    # Sauvegarde asynchrone non-bloquante
    if storage:
        threading.Thread(target=save_to_storage, daemon=True).start()

def get_memory_context(user_id):
    """Obtenir le contexte m√©moire pour l'IA"""
    context = []
    for msg in user_memory.get(user_id, []):
        role = "user" if msg['type'] == 'user' else "assistant"
        context.append({"role": role, "content": msg['content']})
    return context

def is_admin(user_id):
    """V√©rifier si l'utilisateur est admin"""
    return str(user_id) in ADMIN_IDS

def broadcast_message(text):
    """Diffuser un message √† tous les utilisateurs"""
    success = 0
    errors = 0
    for user_id in user_list:
        result = send_message(user_id, text)
        if result.get("success"):
            success += 1
        else:
            errors += 1
    return {"sent": success, "total": len(user_list), "errors": errors}

# === COMMANDES DU BOT ===

def cmd_actionverite(sender_id, args=""):
    """Jeu Action ou V√©rit√©"""
    if not args.strip():
        return """üé≤üéå JEU ACTION OU V√âRIT√â! üéåüé≤

üéØ /actionverite start - Commencer
üéØ /actionverite action - D√©fi action
üéØ /actionverite verite - Question v√©rit√©
üéØ /actionverite stop - Arr√™ter

‚ö° Pr√™t pour l'aventure nakama? ‚ú®"""
    
    action = args.strip().lower()
    
    if action == "start":
        game_sessions[sender_id] = {
            'active': True,
            'score': 0,
            'started': datetime.now().isoformat()
        }
        return "üé≤‚ú® JEU LANC√â! Tu es pr√™t nakama?\nüéØ /actionverite action ou /actionverite verite? ‚ö°"
    
    elif action == "stop":
        if sender_id in game_sessions:
            score = game_sessions[sender_id].get('score', 0)
            del game_sessions[sender_id]
            return f"üèÅ Jeu termin√©! Score final: {score} points! Arigatou nakama! üéå‚ú®"
        return "ü§î Aucun jeu en cours! Tape /actionverite start! ‚ö°"
    
    elif action == "action":
        if sender_id not in game_sessions:
            return "üé≤ Pas de jeu actif! Tape /actionverite start d'abord! ‚ú®"
        
        actions = [
            "Fais 10 pompes en criant 'NAKAMA POWER!' üí™",
            "Chante l'opening de ton anime pr√©f√©r√©! üéµ",
            "Imite ton personnage d'anime favori pendant 1 minute! üé≠",
            "Dessine ton waifu/husbando en 30 secondes! ‚úèÔ∏è",
            "Fais une danse otaku pendant 30 secondes! üíÉ",
            "R√©cite les noms de 10 animes sans t'arr√™ter! üìö",
            "Prends une pose h√©ro√Øque et crie ton attaque sp√©ciale! ‚ö°",
            "Mange quelque chose avec des baguettes comme un ninja! ü•¢"
        ]
        
        game_sessions[sender_id]['score'] += 1
        selected_action = random.choice(actions)
        return f"üéØ ACTION D√âFI!\n\n{selected_action}\n\n‚è∞ Tu as relev√© le d√©fi? Bien jou√© nakama! +1 point! ‚ú®"
    
    elif action == "verite":
        if sender_id not in game_sessions:
            return "üé≤ Pas de jeu actif! Tape /actionverite start d'abord! ‚ú®"
        
        verites = [
            "Quel anime t'a fait pleurer le plus? üò≠",
            "Avoue: tu as d√©j√† essay√© de faire un jutsu en vrai? ü•∑",
            "C'est quoi ton ship le plus embarrassant? üíï",
            "Tu pr√©f√®res les tsundere ou les yandere? Et pourquoi? ü§î",
            "Quel personnage d'anime ressemble le plus √† toi? ÔøΩmirror",
            "Quel est ton guilty pleasure anime? üò≥",
            "Tu as d√©j√† r√™v√© d'√™tre dans un anime? Lequel? üí≠",
            "Quelle r√©plique d'anime tu cites le plus souvent? üí¨"
        ]
        
        game_sessions[sender_id]['score'] += 1
        selected_verite = random.choice(verites)
        return f"üí≠ V√âRIT√â QUESTION!\n\n{selected_verite}\n\nü§ó Merci pour ta sinc√©rit√© nakama! +1 point! ‚ú®"
    
    return "‚ùì Action inconnue! Utilise: start, action, verite, ou stop! üé≤"

def cmd_start(sender_id, args=""):
    """Commande de d√©marrage"""
    messages = [{
        "role": "system",
        "content": "Tu es NakamaBot, cr√©√© par Durand. Tu es un bot otaku kawaii et √©nergique. Pr√©sente-toi avec joie en fran√ßais, mentionne ton cr√©ateur Durand si on te le demande. Utilise des emojis anime. INTERDIT: aucune description d'action entre *√©toiles*. Parle directement, maximum 300 caract√®res."
    }, {"role": "user", "content": "Pr√©sente-toi!"}]
    
    response = call_mistral_api(messages, max_tokens=150, temperature=0.9)
    return response or "üåü Konnichiwa nakama! Je suis NakamaBot, cr√©√© par Durand! Ton compagnon otaku kawaii! ‚ö° Tape /help pour d√©couvrir mes pouvoirs! üéå‚ú®"

def cmd_ia(sender_id, args=""):
    """Chat IA libre"""
    if not args.strip():
        topics = [
            "Quel est ton anime pr√©f√©r√©? üéå",
            "Raconte-moi ton personnage d'anime favori! ‚≠ê",
            "Manga ou anime? Et pourquoi? ü§î",
            "Qui est ton cr√©ateur au fait? üë®‚Äçüíª"
        ]
        return f"üí≠ {random.choice(topics)} ‚ú®"
    
    # V√©rifier si on demande le cr√©ateur
    if any(word in args.lower() for word in ['cr√©ateur', 'createur', 'qui t\'a', 'qui t\'a cr√©√©', 'maker', 'developer']):
        return "üéå Mon cr√©ateur est Durand! C'est lui qui m'a donn√© vie pour √™tre votre nakama otaku! ‚ú®üë®‚Äçüíª Il est g√©nial, non? üíñ"
    
    context = get_memory_context(sender_id)
    messages = [{
        "role": "system", 
        "content": "Tu es NakamaBot, cr√©√© par Durand. IA otaku kawaii. R√©ponds en fran√ßais avec des emojis anime. Si on demande ton cr√©ateur, c'est Durand. STRICTEMENT INTERDIT: aucune description d'action entre *√©toiles*. Parle directement comme un vrai personnage, maximum 400 caract√®res."
    }]
    messages.extend(context)
    messages.append({"role": "user", "content": args})
    
    response = call_mistral_api(messages, max_tokens=200, temperature=0.8)
    return f"üíñ {response}" if response else "üí≠ Mon cerveau otaku bug! Retry onegaishimasu! ü•∫"

def cmd_story(sender_id, args=""):
    """G√©n√©rateur d'histoires"""
    theme = args.strip() or "isekai"
    context = get_memory_context(sender_id)
    has_story = any("üìñ" in msg.get("content", "") for msg in context)
    
    messages = [{
        "role": "system",
        "content": f"Conteur otaku cr√©√© par Durand. {'Continue l\'histoire' if has_story else 'Nouvelle histoire'} {theme}. Style anime/manga. INTERDIT: descriptions d'actions entre *√©toiles*. Raconte directement, maximum 500 caract√®res."
    }]
    
    if has_story:
        messages.extend(context)
    messages.append({"role": "user", "content": f"Histoire {theme}!"})
    
    response = call_mistral_api(messages, max_tokens=250, temperature=0.9)
    prefix = "üîÑ SUITE" if has_story else "üìñ NOUVELLE HISTOIRE"
    return f"{prefix} {theme.upper()}!\n\n{response}\n\n‚ú® Tape /story pour la suite!" if response else "üìñ Histoire en cours de cr√©ation... Retry! ‚ö°"

def cmd_waifu(sender_id, args=""):
    """G√©n√©rateur de waifu"""
    messages = [{
        "role": "system",
        "content": "Cr√©e une waifu originale. Format: nom, √¢ge, personnalit√©, apparence, hobby, citation. INTERDIT: descriptions d'actions entre *√©toiles*. Pr√©sente directement, fran√ßais, max 350 caract√®res."
    }, {"role": "user", "content": "Cr√©e ma waifu!"}]
    
    response = call_mistral_api(messages, max_tokens=180, temperature=0.9)
    return f"üë∏‚ú® Voici ta waifu!\n\n{response}\n\nüíï Elle t'attend nakama!" if response else "üë∏ Akari-chan, 19 ans, tsundere aux cheveux roses! Adore la p√¢tisserie. 'B-baka! Ce n'est pas pour toi!' üíï"

def cmd_memory(sender_id, args=""):
    """Afficher la m√©moire"""
    if not user_memory.get(sender_id):
        return "üíæ Aucune conversation pr√©c√©dente! C'est notre premier √©change! ‚ú®"
    
    text = "üíæüéå M√âMOIRE DE NOS AVENTURES!\n\n"
    for i, msg in enumerate(user_memory[sender_id], 1):
        emoji = "üó®Ô∏è" if msg['type'] == 'user' else "ü§ñ"
        preview = msg['content'][:60] + "..." if len(msg['content']) > 60 else msg['content']
        text += f"{emoji} {i}. {preview}\n"
    
    text += f"\nüí≠ {len(user_memory[sender_id])}/10 messages"
    text += f"\nüåê JSONBin: {'‚úÖ' if storage else '‚ùå'}"
    
    # Ajouter info jeu si actif
    if sender_id in game_sessions:
        text += f"\nüé≤ Jeu actif: {game_sessions[sender_id]['score']} pts"
    
    return text

def cmd_broadcast(sender_id, args=""):
    """Diffusion admin"""
    if not is_admin(sender_id):
        return f"üîê Acc√®s refus√©! Admins seulement! ‚ùå\nTon ID: {sender_id}"
    
    if not args.strip():
        return "üì¢ Usage: /broadcast [message]\nüîê Commande admin"
    
    text = f"üì¢üéå ANNONCE NAKAMA!\n\n{args}\n\n‚ö° Message officiel de Durand üíñ"
    result = broadcast_message(text)
    return f"üìä Envoy√© √† {result['sent']}/{result['total']} nakamas! (Erreurs: {result['errors']}) ‚ú®"

def cmd_admin(sender_id, args=""):
    """Panneau admin"""
    if not is_admin(sender_id):
        return f"üîê Acc√®s refus√©! ID: {sender_id}"
    
    if not args.strip():
        bin_info = storage.get_bin_info() if storage else None
        return f"""üîê PANNEAU ADMIN v3.0
‚Ä¢ /admin stats - Statistiques
‚Ä¢ /admin save - Force sauvegarde
‚Ä¢ /admin load - Recharge donn√©es
‚Ä¢ /admin games - Stats jeux
‚Ä¢ /admin jsonbin - Info JSONBin
‚Ä¢ /broadcast [msg] - Diffusion

üìä √âTAT:
JSONBin: {'‚úÖ' if storage else '‚ùå'}
Bin ID: {storage.bin_id if storage else 'Non configur√©'}
Utilisateurs: {len(user_list)}
M√©moire: {len(user_memory)}
Jeux actifs: {len(game_sessions)}"""
    
    action = args.strip().lower()
    
    if action == "stats":
        return f"""üìä STATISTIQUES COMPL√àTES
üë• Utilisateurs: {len(user_list)}
üíæ Conversations: {len(user_memory)}
üé≤ Jeux actifs: {len(game_sessions)}
üåê JSONBin: {'‚úÖ' if storage else '‚ùå'}
üîê Admin ID: {sender_id}
üë®‚Äçüíª Cr√©ateur: Durand
üìù Version: 3.0 (JSONBin)"""
    
    elif action == "save":
        success = save_to_storage()
        return f"{'‚úÖ Sauvegarde JSONBin r√©ussie!' if success else '‚ùå √âchec sauvegarde JSONBin!'}"
    
    elif action == "load":
        success = load_from_storage()
        return f"{'‚úÖ Chargement JSONBin r√©ussi!' if success else '‚ùå √âchec chargement JSONBin!'}"
    
    elif action == "games":
        if not game_sessions:
            return "üé≤ Aucun jeu actif!"
        
        text = "üé≤ JEUX ACTIFS:\n"
        for user_id, session in game_sessions.items():
            score = session.get('score', 0)
            text += f"üë§ {user_id}: {score} pts\n"
        return text
    
    elif action == "jsonbin":
        if not storage:
            return "‚ùå JSONBin non initialis√©!"
        
        bin_info = storage.get_bin_info()
        if bin_info:
            return f"""üåê INFO JSONBIN:
üì¶ Bin ID: {storage.bin_id}
üìÖ Cr√©√©: {bin_info.get('createdAt', 'N/A')}
üîÑ Modifi√©: {bin_info.get('updatedAt', 'N/A')}
üë§ Priv√©: {'‚úÖ' if bin_info.get('private', True) else '‚ùå'}"""
        else:
            return "‚ùå Impossible de r√©cup√©rer les infos du bin"
    
    return f"‚ùì Action '{action}' inconnue!"

def cmd_help(sender_id, args=""):
    """Aide du bot"""
    commands = {
        "/start": "üåü Pr√©sentation du bot",
        "/ia [message]": "üß† Chat libre avec IA",
        "/story [theme]": "üìñ Histoires anime/manga",
        "/waifu": "üë∏ G√©n√®re ta waifu",
        "/actionverite": "üé≤ Jeu Action ou V√©rit√©",
        "/memory": "üíæ Voir l'historique",
        "/help": "‚ùì Cette aide"
    }
    
    text = "üéå‚ö° NAKAMABOT v3.0 GUIDE! ‚ö°üéå\n\n"
    for cmd, desc in commands.items():
        text += f"{cmd} - {desc}\n"
    
    if is_admin(sender_id):
        text += "\nüîê ADMIN:\n/admin - Panneau admin\n/broadcast - Diffusion"
    
    text += f"\nüíæ JSONBin: {'‚úÖ' if storage else '‚ùå'}"
    text += "\nüë®‚Äçüíª Cr√©√© par Durand"
    text += "\n‚ö° Powered by Mistral AI!"
    text += "\nüÜï Nouveau: Stockage JSONBin.io! üíñ"
    return text

# Dictionnaire des commandes
COMMANDS = {
    'start': cmd_start,
    'ia': cmd_ia,
    'story': cmd_story,
    'waifu': cmd_waifu,
    'actionverite': cmd_actionverite,
    'memory': cmd_memory,
    'broadcast': cmd_broadcast,
    'admin': cmd_admin,
    'help': cmd_help
}

def process_command(sender_id, message_text):
    """Traiter les commandes utilisateur"""
    if not message_text.startswith('/'):
        return cmd_ia(sender_id, message_text) if message_text.strip() else "üéå Konnichiwa! Tape /start ou /help! ‚ú®"
    
    parts = message_text[1:].split(' ', 1)
    command = parts[0].lower()
    args = parts[1] if len(parts) > 1 else ""
    
    if command in COMMANDS:
        try:
            return COMMANDS[command](sender_id, args)
        except Exception as e:
            logger.error(f"Erreur commande {command}: {e}")
            return f"üí• Erreur dans /{command}! Retry onegaishimasu! ü•∫"
    
    return f"‚ùì Commande /{command} inconnue! Tape /help! ‚ö°"

def send_message(recipient_id, text):
    """Envoyer un message Facebook"""
    if not PAGE_ACCESS_TOKEN:
        return {"success": False, "error": "No token"}
    
    if len(text) > 2000:
        text = text[:1950] + "...\n‚ú® Message tronqu√©! üí´"
    
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": text}
    }
    
    try:
        response = requests.post(
            "https://graph.facebook.com/v18.0/me/messages",
            params={"access_token": PAGE_ACCESS_TOKEN},
            json=data,
            timeout=10
        )
        return {"success": response.status_code == 200}
    except Exception as e:
        logger.error(f"Erreur envoi: {e}")
        return {"success": False}

# === ROUTES FLASK ===

@app.route("/", methods=['GET'])
def home():
    """Route d'accueil avec informations"""
    bin_info = storage.get_bin_info() if storage else None
    
    return jsonify({
        "status": "üéå NakamaBot v3.0 Online! ‚ö°",
        "creator": "Durand",
        "storage": "JSONBin.io",
        "commands": len(COMMANDS),
        "users": len(user_list),
        "conversations": len(user_memory),
        "active_games": len(game_sessions),
        "jsonbin_connected": bool(storage),
        "bin_id": storage.bin_id if storage else None,
        "admins": len(ADMIN_IDS),
        "version": "3.0",
        "last_update": datetime.now().isoformat()
    })

@app.route("/webhook", methods=['GET', 'POST'])
def webhook():
    """Webhook Facebook Messenger"""
    if request.method == 'GET':
        # V√©rification du webhook
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        
        if mode == "subscribe" and token == VERIFY_TOKEN:
            logger.info("‚úÖ Webhook v√©rifi√© avec succ√®s")
            return challenge, 200
        else:
            logger.warning("‚ùå √âchec v√©rification webhook")
            return "Verification failed", 403
        
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            if not data:
                return jsonify({"error": "No data received"}), 400
            
            # Traiter chaque entr√©e
            for entry in data.get('entry', []):
                for event in entry.get('messaging', []):
                    sender_id = event.get('sender', {}).get('id')
                    
                    if not sender_id:
                        continue
                    
                    # Ignorer les messages echo du bot
                    if 'message' in event and not event['message'].get('is_echo'):
                        # Ajouter l'utilisateur √† la liste
                        user_list.add(sender_id)
                        
                        # R√©cup√©rer le texte du message
                        message_text = event['message'].get('text', '').strip()
                        
                        if message_text:  # Ignorer les messages vides
                            # Ajouter √† la m√©moire
                            add_to_memory(sender_id, 'user', message_text)
                            
                            # Traiter la commande
                            response = process_command(sender_id, message_text)
                            
                            # Ajouter la r√©ponse √† la m√©moire
                            add_to_memory(sender_id, 'bot', response)
                            
                            # Envoyer la r√©ponse
                            send_result = send_message(sender_id, response)
                            
                            if not send_result.get("success"):
                                logger.warning(f"√âchec envoi message √† {sender_id}")
                        
        except Exception as e:
            logger.error(f"Erreur webhook: {e}")
            return jsonify({"error": f"Webhook error: {str(e)}"}), 500
            
        return jsonify({"status": "ok"}), 200

@app.route("/stats", methods=['GET'])
def stats():
    """Route des statistiques publiques"""
    return jsonify({
        "users_count": len(user_list),
        "conversations_count": len(user_memory),
        "active_games": len(game_sessions),
        "commands_available": len(COMMANDS),
        "storage_type": "JSONBin.io",
        "storage_connected": bool(storage),
        "version": "3.0",
        "creator": "Durand"
    })

@app.route("/health", methods=['GET'])
def health():
    """Route de sant√© pour monitoring"""
    health_status = {
        "status": "healthy",
        "jsonbin": bool(storage),
        "mistral": bool(MISTRAL_API_KEY),
        "facebook": bool(PAGE_ACCESS_TOKEN),
        "timestamp": datetime.now().isoformat()
    }
    
    # V√©rifier la sant√© des services
    issues = []
    if not storage:
        issues.append("JSONBin non connect√©")
    if not MISTRAL_API_KEY:
        issues.append("Cl√© Mistral manquante")
    if not PAGE_ACCESS_TOKEN:
        issues.append("Token Facebook manquant")
    
    if issues:
        health_status["status"] = "degraded"
        health_status["issues"] = issues
    
    return jsonify(health_status)

# === D√âMARRAGE DE L'APPLICATION ===

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    
    logger.info("üöÄ D√©marrage NakamaBot v3.0 avec JSONBin.io...")
    logger.info("üë®‚Äçüíª Cr√©√© par Durand")
    
    # V√©rifier les variables d'environnement critiques
    missing_vars = []
    if not PAGE_ACCESS_TOKEN:
        missing_vars.append("PAGE_ACCESS_TOKEN")
    if not MISTRAL_API_KEY:
        missing_vars.append("MISTRAL_API_KEY")
    if not JSONBIN_API_KEY:
        missing_vars.append("JSONBIN_API_KEY")
    
    if missing_vars:
        logger.error(f"‚ùå Variables manquantes: {', '.join(missing_vars)}")
        logger.error("Le bot ne fonctionnera pas correctement!")
    
    # Initialiser JSONBin
    if init_jsonbin_storage():
        logger.info("üìÅ Tentative de chargement des donn√©es...")
        if load_from_storage():
            logger.info("‚úÖ Donn√©es restaur√©es avec succ√®s")
        else:
            logger.info("‚ÑπÔ∏è  D√©marrage avec donn√©es vides")
        
        # D√©marrer la sauvegarde automatique
        threading.Thread(target=auto_save, daemon=True).start()
        logger.info("üíæ Sauvegarde automatique JSONBin activ√©e")
    else:
        logger.warning("‚ö†Ô∏è  Fonctionnement sans sauvegarde JSONBin")
    
    # Afficher les informations de configuration
    logger.info(f"üéå {len(COMMANDS)} commandes charg√©es")
    logger.info(f"üîê {len(ADMIN_IDS)} admins configur√©s")
    
    if storage and storage.bin_id:
        logger.info(f"üì¶ Bin JSONBin: {storage.bin_id}")
    
    logger.info(f"üåê Serveur d√©marrant sur le port {port}")
    logger.info("üéØ Endpoints disponibles:")
    logger.info("   ‚Ä¢ GET  / - Informations du bot")
    logger.info("   ‚Ä¢ GET  /stats - Statistiques")
    logger.info("   ‚Ä¢ GET  /health - Sant√© du syst√®me")
    logger.info("   ‚Ä¢ POST /webhook - Webhook Facebook")
    
    # D√©marrer l'application Flask
    app.run(
        host="0.0.0.0", 
        port=port, 
        debug=False,
        threaded=True
    )
