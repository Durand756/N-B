import os
import logging
import json
import random
from flask import Flask, request, jsonify
import requests
from datetime import datetime
from collections import defaultdict, deque
import threading
import time

# Configuration du logging 
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuration
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "nakamaverifytoken")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN", "")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY", "")
JSONBIN_API_KEY = "$2a$10$XUdDdy6MCxieCkCAWObx4ePMOlywZwUomubwIamPKO3QJ1aJyY8dO"
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID", "")
ADMIN_IDS = set(id.strip() for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip())

# M√©moire et √©tat du jeu
user_memory = defaultdict(lambda: deque(maxlen=10))
user_list = set()
game_sessions = {}

# Variables globales pour le stockage
_saving_lock = threading.Lock()
_last_save_time = 0
_save_needed = False

class JSONBinStorage:
    """Classe pour g√©rer le stockage JSONBin.io avec corrections"""
    
    def __init__(self, api_key, bin_id=None):
        self.api_key = api_key
        self.bin_id = bin_id
        self.base_url = "https://api.jsonbin.io/v3"
        self.headers = {
            "Content-Type": "application/json",
            "X-Master-Key": api_key
        }
        logger.info(f"üîß JSONBin initialis√© avec bin_id: {bin_id}")
    
    def create_bin(self, initial_data=None):
        """Cr√©er un nouveau bin JSONBin"""
        data = initial_data or {
            'user_memory': {},
            'user_list': [],
            'game_sessions': {},
            'timestamp': datetime.now().isoformat(),
            'version': '3.0',
            'creator': 'Durand'
        }
        
        try:
            headers = self.headers.copy()
            headers["X-Bin-Private"] = "true"
            headers["X-Bin-Name"] = "NakamaBot-Data"
            
            logger.info("üì¶ Cr√©ation d'un nouveau bin JSONBin...")
            response = requests.post(
                f"{self.base_url}/b",
                headers=headers,
                json=data,
                timeout=20
            )
            
            logger.info(f"üîç R√©ponse cr√©ation bin: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                self.bin_id = result['metadata']['id']
                logger.info(f"‚úÖ Nouveau bin JSONBin cr√©√©: {self.bin_id}")
                logger.info(f"üîë IMPORTANT: Ajoutez cette variable d'environnement: JSONBIN_BIN_ID={self.bin_id}")
                return True
            else:
                logger.error(f"‚ùå Erreur cr√©ation bin: {response.status_code}")
                logger.error(f"R√©ponse: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation bin: {e}")
            return False
    
    def save_data(self, data):
        """Sauvegarder avec gestion d'erreurs am√©lior√©e"""
        if not self.bin_id:
            logger.warning("‚ö†Ô∏è Pas de bin_id, cr√©ation automatique...")
            if not self.create_bin(data):
                return False
        
        try:
            # Pr√©parer les donn√©es s√©rialisables
            serializable_data = self._make_serializable(data)
            
            data_to_save = {
                **serializable_data,
                'timestamp': datetime.now().isoformat(),
                'version': '3.0',
                'creator': 'Durand'
            }
            
            # Test de s√©rialisation
            json.dumps(data_to_save)
            logger.info("üì¶ Pr√©paration des donn√©es pour sauvegarde...")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©paration donn√©es: {e}")
            return False
        
        # Sauvegarde avec retry
        max_retries = 3
        for attempt in range(max_retries):
            try:
                logger.info(f"üíæ Tentative de sauvegarde {attempt + 1}/{max_retries}...")
                
                response = requests.put(
                    f"{self.base_url}/b/{self.bin_id}",
                    headers=self.headers,
                    json=data_to_save,
                    timeout=25
                )
                
                logger.info(f"üîç Status sauvegarde: {response.status_code}")
                
                if response.status_code == 200:
                    logger.info("‚úÖ Donn√©es sauvegard√©es avec succ√®s sur JSONBin!")
                    return True
                elif response.status_code == 401:
                    logger.error("‚ùå Cl√© API JSONBin invalide")
                    return False
                elif response.status_code == 404:
                    logger.warning("‚ö†Ô∏è Bin introuvable, cr√©ation d'un nouveau...")
                    self.bin_id = None
                    return self.save_data(data)
                else:
                    logger.warning(f"‚ö†Ô∏è Erreur {response.status_code}: {response.text}")
                    if attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 3
                        logger.info(f"‚è≥ Attente {wait_time}s avant retry...")
                        time.sleep(wait_time)
                        continue
                        
            except requests.Timeout:
                logger.warning(f"‚è±Ô∏è Timeout tentative {attempt + 1}")
                if attempt < max_retries - 1:
                    time.sleep((attempt + 1) * 2)
                    continue
            except Exception as e:
                logger.error(f"‚ùå Erreur sauvegarde: {e}")
                if attempt < max_retries - 1:
                    time.sleep((attempt + 1) * 2)
                    continue
                break
        
        logger.error("‚ùå √âchec de toutes les tentatives de sauvegarde")
        return False
    
    def load_data(self):
        """Charger les donn√©es avec validation"""
        if not self.bin_id:
            logger.warning("‚ö†Ô∏è Pas de bin_id pour le chargement")
            return None
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                logger.info(f"üì• Tentative de chargement {attempt + 1}/{max_retries}...")
                
                response = requests.get(
                    f"{self.base_url}/b/{self.bin_id}/latest",
                    headers=self.headers,
                    timeout=20
                )
                
                logger.info(f"üîç Status chargement: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()['record']
                    if self._validate_data(data):
                        logger.info(f"‚úÖ Donn√©es charg√©es (v{data.get('version', '1.0')})")
                        return data
                    else:
                        logger.warning("‚ö†Ô∏è Donn√©es invalides")
                        return None
                        
                elif response.status_code == 401:
                    logger.error("‚ùå Cl√© API invalide")
                    return None
                elif response.status_code == 404:
                    logger.error("‚ùå Bin introuvable")
                    return None
                else:
                    logger.warning(f"‚ö†Ô∏è Erreur {response.status_code}")
                    if attempt < max_retries - 1:
                        time.sleep((attempt + 1) * 2)
                        continue
                        
            except Exception as e:
                logger.warning(f"‚ùå Erreur chargement: {e}")
                if attempt < max_retries - 1:
                    time.sleep((attempt + 1) * 2)
                    continue
                break
        
        logger.error("‚ùå √âchec chargement apr√®s tous les essais")
        return None
    
    def _make_serializable(self, data):
        """Convertir en format JSON s√©rialisable"""
        serializable = {}
        
        # Convertir user_memory
        if 'user_memory' in data:
            serializable['user_memory'] = {}
            for user_id, messages in data['user_memory'].items():
                if hasattr(messages, '__iter__'):
                    serializable['user_memory'][str(user_id)] = list(messages)
                else:
                    serializable['user_memory'][str(user_id)] = []
        
        # Convertir user_list
        if 'user_list' in data:
            if hasattr(data['user_list'], '__iter__'):
                serializable['user_list'] = list(data['user_list'])
            else:
                serializable['user_list'] = []
        
        # Copier game_sessions
        if 'game_sessions' in data:
            serializable['game_sessions'] = dict(data['game_sessions'])
        
        return serializable
    
    def _validate_data(self, data):
        """Valider la structure des donn√©es"""
        if not isinstance(data, dict):
            logger.warning("‚ùå Donn√©es ne sont pas un dictionnaire")
            return False
        
        required_fields = ['user_memory', 'user_list', 'game_sessions']
        for field in required_fields:
            if field not in data:
                logger.warning(f"‚ùå Champ manquant: {field}")
                return False
        
        return True

# Initialiser le stockage
storage = None

def init_jsonbin_storage():
    """Initialiser JSONBin avec validation compl√®te et diagnostics d√©taill√©s"""
    global storage
    
    logger.info("üîß D√©but initialisation JSONBin...")
    logger.info(f"üîç JSONBIN_API_KEY pr√©sente: {'‚úÖ' if JSONBIN_API_KEY else '‚ùå'}")
    logger.info(f"üîç JSONBIN_BIN_ID pr√©sent: {'‚úÖ' if JSONBIN_BIN_ID else '‚ùå'}")
    
    if not JSONBIN_API_KEY:
        logger.error("‚ùå JSONBIN_API_KEY manquante dans les variables d'environnement!")
        logger.error("üí° V√©rifiez que la variable est bien d√©finie dans votre environnement")
        storage = None
        return False
    
    try:
        # Cr√©er l'instance de stockage
        logger.info("üèóÔ∏è Cr√©ation de l'instance JSONBinStorage...")
        storage = JSONBinStorage(JSONBIN_API_KEY, JSONBIN_BIN_ID)
        logger.info("‚úÖ Instance JSONBinStorage cr√©√©e")
        
        # Test de connectivit√© r√©seau de base
        logger.info("üåê Test de connectivit√© r√©seau...")
        try:
            test_response = requests.get("https://httpbin.org/status/200", timeout=5)
            logger.info("‚úÖ Connectivit√© r√©seau OK")
        except:
            logger.warning("‚ö†Ô∏è Probl√®me de connectivit√© r√©seau d√©tect√©")
        
        # Test de la cl√© API
        logger.info("üîë Test de la cl√© API JSONBin...")
        test_headers = {"X-Master-Key": JSONBIN_API_KEY}
        
        try:
            test_response = requests.get(
                "https://api.jsonbin.io/v3/b",
                headers=test_headers,
                timeout=15
            )
            
            logger.info(f"üîç R√©ponse test API: {test_response.status_code}")
            
            if test_response.status_code == 401:
                logger.error("‚ùå Cl√© API JSONBin invalide ou expir√©e!")
                logger.error("üí° V√©rifiez votre cl√© sur jsonbin.io")
                storage = None
                return False
            elif test_response.status_code == 200:
                logger.info("‚úÖ Cl√© API JSONBin valid√©e")
            else:
                logger.warning(f"‚ö†Ô∏è R√©ponse inattendue de l'API: {test_response.status_code}")
                # Continuer quand m√™me, parfois l'API peut retourner d'autres codes
                
        except requests.Timeout:
            logger.error("‚ùå Timeout lors du test de la cl√© API")
            logger.warning("‚ö†Ô∏è Continuons quand m√™me...")
        except Exception as e:
            logger.error(f"‚ùå Erreur test cl√© API: {e}")
            logger.warning("‚ö†Ô∏è Continuons quand m√™me...")
        
        # Si bin_id existe, tester le chargement
        if JSONBIN_BIN_ID and JSONBIN_BIN_ID.strip():
            logger.info(f"üîç Test du bin existant: {JSONBIN_BIN_ID}")
            try:
                test_data = storage.load_data()
                if test_data is not None:
                    logger.info("‚úÖ JSONBin connect√© au bin existant avec succ√®s!")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Bin inaccessible ou vide, cr√©ation d'un nouveau...")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur test bin existant: {e}")
                logger.info("üîÑ Tentative de cr√©ation d'un nouveau bin...")
        else:
            logger.info("‚ÑπÔ∏è Pas de bin_id fourni, cr√©ation d'un nouveau bin...")
        
        # Cr√©er un nouveau bin
        logger.info("üÜï Cr√©ation d'un nouveau bin JSONBin...")
        try:
            if storage.create_bin():
                logger.info("‚úÖ JSONBin initialis√© avec succ√®s! Nouveau bin cr√©√©.")
                logger.info(f"üìù IMPORTANT: Notez ce bin_id pour la prochaine fois: {storage.bin_id}")
                return True
            else:
                logger.error("‚ùå Impossible de cr√©er un nouveau bin")
                storage = None
                return False
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation bin: {e}")
            storage = None
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©rale initialisation JSONBin: {e}")
        logger.error(f"üîç Type d'erreur: {type(e).__name__}")
        storage = None
        return False

def save_to_storage(force=False):
    """Sauvegarde avec diagnostics am√©lior√©s"""
    global _last_save_time, _save_needed
    
    # V√©rification de l'√©tat du stockage
    if storage is None:
        logger.error("‚ùå Stockage non initialis√© - storage = None")
        logger.error("üí° V√©rifiez les variables JSONBIN_API_KEY et l'initialisation")
        return False
    
    if not hasattr(storage, 'bin_id') or not storage.bin_id:
        logger.error("‚ùå Pas de bin_id configur√© dans storage")
        logger.error("üí° Le stockage semble mal initialis√©")
        return False
    
    current_time = time.time()
    
    # Throttling (sauf si forc√©)
    if not force and current_time - _last_save_time < 10:
        logger.debug("üîÑ Sauvegarde throttled")
        _save_needed = True
        return True
    
    with _saving_lock:
        try:
            logger.info(f"üíæ D√©marrage sauvegarde (bin_id: {storage.bin_id})...")
            
            data = {
                'user_memory': dict(user_memory),
                'user_list': user_list,
                'game_sessions': game_sessions
            }
            
            logger.info(f"üì¶ Donn√©es √† sauvegarder: {len(data['user_list'])} users, {len(data['user_memory'])} conversations")
            
            success = storage.save_data(data)
            if success:
                _last_save_time = current_time
                _save_needed = False
                logger.info("‚úÖ Sauvegarde r√©ussie!")
            else:
                logger.error("‚ùå √âchec de la sauvegarde")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde: {e}")
            logger.error(f"üîç √âtat storage: {storage}")
            logger.error(f"üîç bin_id: {getattr(storage, 'bin_id', 'UNDEFINED')}")
            return False

def load_from_storage():
    """Chargement avec diagnostics d√©taill√©s"""
    global user_memory, user_list, game_sessions
    
    if storage is None:
        logger.error("‚ùå Stockage non initialis√© pour le chargement")
        return False
    
    if not hasattr(storage, 'bin_id') or not storage.bin_id:
        logger.error("‚ùå Pas de bin_id pour le chargement")
        return False
    
    try:
        logger.info(f"üì• Chargement depuis bin_id: {storage.bin_id}...")
        data = storage.load_data()
        if not data:
            logger.info("üìÅ Aucune donn√©e √† charger (bin vide ou nouveau)")
            return False
        
        logger.info("üîÑ Reconstruction des structures de donn√©es...")
        
        # Reconstruire user_memory
        user_memory.clear()
        loaded_memory = data.get('user_memory', {})
        for user_id, messages in loaded_memory.items():
            if isinstance(messages, list):
                valid_messages = []
                for msg in messages:
                    if isinstance(msg, dict) and 'type' in msg and 'content' in msg:
                        valid_messages.append(msg)
                user_memory[str(user_id)] = deque(valid_messages, maxlen=10)
        
        # Reconstruire user_list
        user_list.clear()
        loaded_users = data.get('user_list', [])
        if isinstance(loaded_users, list):
            for uid in loaded_users:
                if uid:
                    user_list.add(str(uid))
        
        # Reconstruire game_sessions
        game_sessions.clear()
        loaded_games = data.get('game_sessions', {})
        if isinstance(loaded_games, dict):
            game_sessions.update(loaded_games)
        
        logger.info(f"üìä Donn√©es restaur√©es avec succ√®s:")
        logger.info(f"  üë• {len(user_list)} utilisateurs")
        logger.info(f"  üíæ {len(user_memory)} conversations") 
        logger.info(f"  üé≤ {len(game_sessions)} jeux actifs")
        logger.info(f"  üìÖ Version: {data.get('version', '1.0')}")
        logger.info(f"  üïê Timestamp: {data.get('timestamp', 'N/A')}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement: {e}")
        logger.error(f"üîç √âtat storage: {storage}")
        logger.error(f"üîç bin_id: {getattr(storage, 'bin_id', 'UNDEFINED')}")
        return False

def auto_save():
    """Syst√®me de sauvegarde automatique optimis√©"""
    global _save_needed
    
    logger.info("üîÑ Auto-save d√©marr√©")
    
    while True:
        try:
            time.sleep(120)  # V√©rifier toutes les 2 minutes
            
            # Sauvegarder si n√©cessaire ou p√©riodiquement
            if _save_needed or time.time() - _last_save_time > 300:  # 5 minutes max
                if user_memory or user_list or game_sessions:
                    logger.info("üîÑ D√©clenchement auto-save...")
                    save_to_storage(force=True)
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur auto-save: {e}")
            time.sleep(60)

def call_mistral_api(messages, max_tokens=200, temperature=0.8):
    """API Mistral avec retry am√©lior√©"""
    if not MISTRAL_API_KEY:
        return None
    
    headers = {
        "Content-Type": "application/json", 
        "Authorization": f"Bearer {MISTRAL_API_KEY}"
    }
    data = {
        "model": "mistral-small-latest",
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature
    }
    
    for attempt in range(2):
        try:
            response = requests.post(
                "https://api.mistral.ai/v1/chat/completions", 
                headers=headers, 
                json=data, 
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            elif response.status_code == 401:
                logger.error("‚ùå Cl√© API Mistral invalide")
                return None
            else:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return None
                
        except Exception as e:
            if attempt == 0:
                time.sleep(2)
                continue
            logger.error(f"‚ùå Erreur Mistral: {e}")
            return None
    
    return None

def add_to_memory(user_id, msg_type, content):
    """Ajouter √† la m√©moire avec d√©clenchement de sauvegarde"""
    global _save_needed
    
    if not user_id or not msg_type or not content:
        return
    
    # Limiter la taille
    if len(content) > 2000:
        content = content[:1900] + "...[tronqu√©]"
    
    user_memory[str(user_id)].append({
        'type': msg_type,
        'content': content,
        'timestamp': datetime.now().isoformat()
    })
    
    # Marquer qu'une sauvegarde est n√©cessaire
    _save_needed = True
    
    # D√©clencher sauvegarde imm√©diate parfois
    if random.random() < 0.05:  # 5% de chance
        threading.Thread(target=lambda: save_to_storage(), daemon=True).start()

def get_memory_context(user_id):
    """Obtenir le contexte m√©moire"""
    context = []
    for msg in user_memory.get(str(user_id), []):
        role = "user" if msg['type'] == 'user' else "assistant"
        context.append({"role": role, "content": msg['content']})
    return context

def is_admin(user_id):
    """V√©rifier admin"""
    return str(user_id) in ADMIN_IDS


# Dictionnaire global pour emp√™cher les broadcasts en double
_broadcast_locks = {}
_broadcast_history = {}

def broadcast_message(text):
    """Diffusion de messages avec protection contre les envois multiples"""
    if not text or not user_list:
        return {"sent": 0, "total": 0, "errors": 0}
    
    # Cr√©er une signature unique pour ce message
    message_signature = f"{hash(text)}_{len(user_list)}"
    current_time = time.time()
    
    # V√©rifier si ce message exact a d√©j√† √©t√© envoy√© r√©cemment (dans les 30 derni√®res secondes)
    if message_signature in _broadcast_history:
        last_sent_time = _broadcast_history[message_signature]
        if current_time - last_sent_time < 30:  # 30 secondes de protection
            logger.warning(f"üö´ Broadcast dupliqu√© bloqu√©! Signature: {message_signature}")
            return {"sent": 0, "total": 0, "errors": 0, "blocked": True}
    
    # V√©rifier si un broadcast est d√©j√† en cours avec un lock
    if message_signature in _broadcast_locks:
        logger.warning(f"üö´ Broadcast d√©j√† en cours! Signature: {message_signature}")
        return {"sent": 0, "total": 0, "errors": 0, "already_running": True}
    
    # Cr√©er un lock pour ce broadcast
    _broadcast_locks[message_signature] = threading.Lock()
    
    try:
        with _broadcast_locks[message_signature]:
            # Marquer ce message comme envoy√©
            _broadcast_history[message_signature] = current_time
            
            # Nettoyer l'historique (garder seulement les 10 derniers)
            if len(_broadcast_history) > 10:
                oldest_key = min(_broadcast_history.keys(), key=lambda k: _broadcast_history[k])
                del _broadcast_history[oldest_key]
            
            success = 0
            errors = 0
            total_users = len(user_list)
            
            logger.info(f"üì¢ D√©but broadcast unique vers {total_users} utilisateurs")
            logger.info(f"üîí Signature: {message_signature}")
            
            for user_id in list(user_list):  # Copie pour √©viter la modification pendant l'it√©ration
                try:
                    if not user_id or not str(user_id).strip():
                        continue
                        
                    # Petite pause pour √©viter de spam l'API Facebook
                    time.sleep(0.3)
                    
                    result = send_message(str(user_id), text)
                    if result.get("success"):
                        success += 1
                        logger.debug(f"‚úÖ Broadcast envoy√© √† {user_id}")
                    else:
                        errors += 1
                        logger.warning(f"‚ùå √âchec broadcast pour {user_id}: {result.get('error', 'Unknown')}")
                        
                except Exception as e:
                    errors += 1
                    logger.error(f"‚ùå Erreur broadcast pour {user_id}: {e}")
            
            logger.info(f"üìä Broadcast termin√©: {success} succ√®s, {errors} erreurs")
            return {
                "sent": success, 
                "total": total_users, 
                "errors": errors
            }
            
    finally:
        # Nettoyer le lock apr√®s utilisation
        if message_signature in _broadcast_locks:
            del _broadcast_locks[message_signature]


##################IMAGES###########################
def cmd_image(sender_id, args=""):
    """G√©n√©rateur d'images anime/otaku gratuites"""
    if not args.strip():
        return """üé®üéå G√âN√âRATEUR D'IMAGES OTAKU! üéåüé®

üñºÔ∏è /image [description] - G√©n√®re une image
üé® /image anime girl pink hair - Exemple
üå∏ /image kawaii cat with sword - Exemple  
‚ö° /image random - Image al√©atoire

‚ú® D√©cris ton r√™ve otaku nakama! üé≠"""
    
    prompt = args.strip().lower()
    sender_id = str(sender_id)
    
    # Images al√©atoires si demand√©
    if prompt == "random":
        random_prompts = [
            "anime girl with blue hair and katana",
            "kawaii cat girl in school uniform", 
            "epic dragon in anime style",
            "cute anime boy with glasses",
            "magical girl transformation",
            "ninja in cherry blossom forest",
            "robot mech in cyberpunk city",
            "anime princess with crown"
        ]
        prompt = random.choice(random_prompts)
    
    try:
        # Nettoyer et formater le prompt
        clean_prompt = prompt.replace(' ', '+').replace(',', '%2C')
        
        # Utiliser l'API gratuite Picsum + overlay text pour simuler la g√©n√©ration
        # En r√©alit√©, on utilise une API de placeholder avec du texte
        base_url = "https://picsum.photos/512/512"
        
        # Alternative: utiliser une vraie API gratuite comme Pollinations
        # Cette API est gratuite et g√©n√®re de vraies images √† partir de prompts
        image_url = f"https://image.pollinations.ai/prompt/{clean_prompt}?width=512&height=512&seed={random.randint(1, 10000)}"
        
        # Cr√©er la r√©ponse avec l'URL de l'image
        response = f"""üé®‚ú® IMAGE G√âN√âR√âE! ‚ú®üé®

üñºÔ∏è Prompt: {prompt}
üå∏ Voici ton image otaku nakama!

{image_url}

üé≠ Tape /image pour une nouvelle cr√©ation!
‚ö° Ou /image random pour surprendre! üíñ"""
        
        # Ajouter √† la m√©moire qu'une image a √©t√© g√©n√©r√©e
        add_to_memory(sender_id, 'bot', f"Image g√©n√©r√©e: {prompt}")
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration image: {e}")
        return """üé®üí• Erreur de g√©n√©ration!

üîß Les serveurs d'images sont occup√©s!
‚ö° Retry dans quelques secondes nakama!
üéå Ou essaie /image random! ‚ú®"""

# Alternative avec une vraie API de g√©n√©ration d'images gratuite
def cmd_image_advanced(sender_id, args=""):
    """Version avanc√©e avec vraie g√©n√©ration d'images"""
    if not args.strip():
        return """üé®üéå AI IMAGE GENERATOR! üéåüé®

üñºÔ∏è /image [description] - G√©n√®re une image IA
üé® Styles: anime, kawaii, cyberpunk, fantasy
üå∏ Exemple: /image anime girl pink hair magic
‚ö° /image random - Surprise al√©atoire

‚ú® D√©cris ton monde otaku nakama! üé≠"""
    
    prompt = args.strip()
    sender_id = str(sender_id)
    
    if prompt.lower() == "random":
        random_prompts = [
            "beautiful anime girl with long blue hair holding a glowing sword",
            "kawaii neko girl in magical school uniform with sparkles",
            "epic mecha robot in futuristic cyberpunk city at sunset", 
            "cute anime boy with glasses reading a magic book",
            "magical girl transformation with rainbow energy aura",
            "ninja warrior in cherry blossom forest with katana",
            "dragon girl with horns and wings in fantasy landscape",
            "anime princess with crown in crystal palace"
        ]
        prompt = random.choice(random_prompts)
    
    try:
        # Optimiser le prompt pour l'anime
        enhanced_prompt = f"anime style, {prompt}, high quality, detailed, colorful, kawaii"
        
        # Encoder le prompt pour l'URL
        import urllib.parse
        encoded_prompt = urllib.parse.quote(enhanced_prompt)
        
        # Utiliser l'API Pollinations (gratuite et sans limite)
        seed = random.randint(1, 999999)
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=768&height=768&seed={seed}&enhance=true"
        
        # Cr√©er la r√©ponse
        response = f"""üé®‚ö° IMAGE IA G√âN√âR√âE! ‚ö°üé®

üñºÔ∏è "{prompt}"
üéå Style: Anime Optimis√©
üå∏ Seed: {seed}

{image_url}

‚ú® Sauvegarde ton image nakama!
üé≠ /image pour une nouvelle cr√©ation! üíñ"""
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration image avanc√©e: {e}")
        return """üé®üí• Erreur IA temporaire!

üîß L'intelligence artificielle se repose!
‚ö° Essaie /image random ou retry!
üéå Ton image arrive bient√¥t! ‚ú®"""

def send_image_message(recipient_id, image_url, caption=""):
    """Envoyer une image via Facebook Messenger"""
    if not PAGE_ACCESS_TOKEN:
        logger.error("‚ùå PAGE_ACCESS_TOKEN manquant")
        return {"success": False, "error": "No token"}
    
    if not image_url:
        logger.warning("‚ö†Ô∏è URL d'image vide")
        return {"success": False, "error": "Empty image URL"}
    
    # Structure pour envoyer une image
    data = {
        "recipient": {"id": str(recipient_id)},
        "message": {
            "attachment": {
                "type": "image",
                "payload": {
                    "url": image_url,
                    "is_reusable": True
                }
            }
        }
    }
    
    try:
        # Envoyer l'image
        response = requests.post(
            "https://graph.facebook.com/v18.0/me/messages",
            params={"access_token": PAGE_ACCESS_TOKEN},
            json=data,
            timeout=20
        )
        
        if response.status_code == 200:
            # Si il y a une caption, l'envoyer s√©par√©ment
            if caption:
                time.sleep(0.5)  # Petit d√©lai
                return send_message(recipient_id, caption)
            return {"success": True}
        else:
            logger.error(f"‚ùå Erreur envoi image: {response.status_code} - {response.text}")
            return {"success": False, "error": f"API Error {response.status_code}"}
            
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi image: {e}")
        return {"success": False, "error": str(e)}

# Fonction helper pour valider les prompts
def validate_image_prompt(prompt):
    """Valider et nettoyer les prompts d'images"""
    if not prompt or len(prompt.strip()) < 3:
        return False, "Prompt trop court! Minimum 3 caract√®res! üìù"
    
    if len(prompt) > 200:
        return False, "Prompt trop long! Maximum 200 caract√®res! ‚úÇÔ∏è"
    
    # Mots interdits (optionnel, pour √©viter le contenu inappropri√©)
    forbidden_words = ['nsfw', 'nude', 'explicit', 'xxx']
    for word in forbidden_words:
        if word in prompt.lower():
            return False, "üö´ Contenu inappropri√© d√©tect√©! Reste kawaii! üå∏"
    
    return True, prompt.strip()

# Version finale optimis√©e pour le bot
def cmd_image_final(sender_id, args=""):
    """Commande image finale optimis√©e pour NakamaBot"""
    if not args.strip():
        return """üé®üéå NAKAMABOT IMAGE AI! üéåüé®

üñºÔ∏è /image [description] - G√©n√®re ton image
üé® /image anime girl blue hair - Exemple
üå∏ /image kawaii cat ninja - Exemple
‚ö° /image random - Surprise otaku
üé≠ /image styles - Voir les styles

‚ú® Imagine, je cr√©e nakama! üíñ"""
    
    prompt = args.strip().lower()
    sender_id = str(sender_id)
    
    # Commandes sp√©ciales
    if prompt == "styles":
        return """üé® STYLES DISPONIBLES:

üå∏ anime - Style anime classique
‚ö° kawaii - Super mignon
üî• cyberpunk - Futuriste n√©on
üåô fantasy - Monde magique
üóæ traditional - Art japonais
ü§ñ mecha - Robots g√©ants
üëò kimono - Style traditionnel
üåà colorful - Explosion de couleurs

üí° Combine les styles: "anime cyberpunk girl" ‚ú®"""
    
    if prompt == "random":
        themes = [
            "anime girl with magical powers and glowing eyes",
            "kawaii cat wearing samurai armor in bamboo forest", 
            "cyberpunk ninja with neon katana in tokyo streets",
            "cute anime boy with dragon companion",
            "magical girl in sailor outfit with moon tiara",
            "mecha pilot girl in futuristic cockpit",
            "fox girl shrine maiden with spiritual energy",
            "anime princess with crystal wings in castle"
        ]
        prompt = random.choice(themes)
    
    # Valider le prompt
    is_valid, validated_prompt = validate_image_prompt(prompt)
    if not is_valid:
        return f"‚ùå {validated_prompt}"
    
    try:
        # Am√©liorer le prompt automatiquement
        enhanced_prompt = f"anime style, high quality, detailed, {validated_prompt}, beautiful, kawaii aesthetic"
        
        # Encoder pour l'URL
        import urllib.parse
        encoded_prompt = urllib.parse.quote(enhanced_prompt)
        
        # G√©n√©rer l'image
        seed = random.randint(100000, 999999)
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?width=768&height=768&seed={seed}&enhance=true&model=flux"
        
        # Sauvegarder dans la m√©moire
        add_to_memory(sender_id, 'user', f"Image demand√©e: {validated_prompt}")
        add_to_memory(sender_id, 'bot', f"Image g√©n√©r√©e pour: {validated_prompt}")
        
        # Retourner directement l'URL de l'image avec un message simple
        return {
            "type": "image",
            "url": image_url,
            "caption": f"üé®‚ú® Voici ton image otaku nakama!\n\nüñºÔ∏è \"{validated_prompt}\"\n\nüéå Tape /image pour une nouvelle cr√©ation! ‚ö°"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration image: {e}")
        return """üé®üí• Erreur temporaire!

üîß L'IA artistique se repose un moment!
‚ö° Retry dans 10 secondes nakama!
üé≤ Ou essaie /image random! 

üå∏ Tes images arrivent bient√¥t! ‚ú®"""
###########################################


def cmd_broadcast(sender_id, args=""):
    """Diffusion admin avec protection anti-spam renforc√©e"""
    if not is_admin(sender_id):
        return f"üîê Acc√®s refus√©! Admins seulement! ‚ùå\nTon ID: {sender_id}"
    
    if not args.strip():
        return f"""üì¢ COMMANDE BROADCAST
Usage: /broadcast [message]

üìä √âtat actuel:
‚Ä¢ Utilisateurs: {len(user_list)}
‚Ä¢ Broadcasts r√©cents: {len(_broadcast_history)}

‚ö†Ô∏è Protection anti-spam activ√©e (30s entre messages identiques)
üîê Commande admin uniquement"""
    
    message_text = args.strip()
    
    # V√©rifications de s√©curit√©
    if len(message_text) > 1800:
        return "‚ùå Message trop long! Maximum 1800 caract√®res."
    
    if not user_list:
        return "üì¢ Aucun utilisateur √† notifier! Liste vide."
    
    # Cr√©er le message final
    formatted_message = f"üì¢üéå ANNONCE NAKAMA!\n\n{message_text}\n\n‚ö° Message officiel de Durand üíñ"
    
    # Log de l'action admin AVANT l'envoi
    logger.info(f"üì¢ Admin {sender_id} demande broadcast: '{message_text[:50]}...'")
    
    # V√©rifier si c'est un doublon r√©cent
    message_signature = f"{hash(formatted_message)}_{len(user_list)}"
    current_time = time.time()
    
    if message_signature in _broadcast_history:
        last_sent = _broadcast_history[message_signature]
        time_diff = current_time - last_sent
        if time_diff < 30:
            return f"üö´ Message identique envoy√© il y a {int(time_diff)}s! Attendez {int(30-time_diff)}s."
    
    try:
        # Envoyer le broadcast (UNE SEULE FOIS)
        result = broadcast_message(formatted_message)
        
        # V√©rifier si c'√©tait bloqu√©
        if result.get("blocked"):
            return "üö´ Broadcast bloqu√© - message identique d√©tect√©!"
        
        if result.get("already_running"):
            return "üö´ Un broadcast identique est d√©j√† en cours!"
        
        # Calculer le taux de succ√®s
        success_rate = (result['sent'] / result['total'] * 100) if result['total'] > 0 else 0
        
        response = f"""üìä BROADCAST ENVOY√â!

‚úÖ Succ√®s: {result['sent']}
üì± Total: {result['total']}
‚ùå Erreurs: {result['errors']}
üìà Taux: {success_rate:.1f}%

üîí Message prot√©g√© contre les doublons pendant 30s"""

        if result['sent'] == 0:
            response += "\n\nüí° Aucun envoi! V√©rifiez la connectivit√©."
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique broadcast: {e}")
        return f"üí• Erreur: {str(e)[:100]}"
# === COMMANDES DU BOT ===

def cmd_actionverite(sender_id, args=""):
    """Jeu Action ou V√©rit√©"""
    if not args.strip():
        return """üé≤üéå JEU ACTION OU V√âRIT√â! üéåüé≤

üéØ /actionverite start - Commencer
üéØ /actionverite action - D√©fi action
üéØ /actionverite verite - Question v√©rit√©
üéØ /actionverite stop - Arr√™ter

‚ö° Pr√™t pour l'aventure nakama? ‚ú®"""
    
    action = args.strip().lower()
    sender_id = str(sender_id)
    
    if action == "start":
        game_sessions[sender_id] = {
            'active': True,
            'score': 0,
            'started': datetime.now().isoformat()
        }
        return "üé≤‚ú® JEU LANC√â! Tu es pr√™t nakama?\nüéØ /actionverite action ou /actionverite verite? ‚ö°"
    
    elif action == "stop":
        if sender_id in game_sessions:
            score = game_sessions[sender_id].get('score', 0)
            del game_sessions[sender_id]
            return f"üèÅ Jeu termin√©! Score final: {score} points! Arigatou nakama! üéå‚ú®"
        return "ü§î Aucun jeu en cours! Tape /actionverite start! ‚ö°"
    
    elif action == "action":
        if sender_id not in game_sessions:
            return "üé≤ Pas de jeu actif! Tape /actionverite start d'abord! ‚ú®"
        
        actions = [
            "Fais 10 pompes en criant 'NAKAMA POWER!' üí™",
            "Chante l'opening de ton anime pr√©f√©r√©! üéµ",
            "Imite ton personnage d'anime favori pendant 1 minute! üé≠",
            "Dessine ton waifu/husbando en 30 secondes! ‚úèÔ∏è",
            "Fais une danse otaku pendant 30 secondes! üíÉ",
            "R√©cite les noms de 10 animes sans t'arr√™ter! üìö",
            "Prends une pose h√©ro√Øque et crie ton attaque sp√©ciale! ‚ö°",
            "Mange quelque chose avec des baguettes comme un ninja! ü•¢"
        ]
        
        game_sessions[sender_id]['score'] += 1
        selected_action = random.choice(actions)
        return f"üéØ ACTION D√âFI!\n\n{selected_action}\n\n‚è∞ Tu as relev√© le d√©fi? Bien jou√© nakama! +1 point! ‚ú®"
    
    elif action == "verite":
        if sender_id not in game_sessions:
            return "üé≤ Pas de jeu actif! Tape /actionverite start d'abord! ‚ú®"
        
        verites = [
            "Quel anime t'a fait pleurer le plus? üò≠",
            "Avoue: tu as d√©j√† essay√© de faire un jutsu en vrai? ü•∑",
            "C'est quoi ton ship le plus embarrassant? üíï",
            "Tu pr√©f√®res les tsundere ou les yandere? Et pourquoi? ü§î",
            "Quel personnage d'anime ressemble le plus √† toi? ü™û",
            "Quel est ton guilty pleasure anime? üò≥",
            "Tu as d√©j√† r√™v√© d'√™tre dans un anime? Lequel? üí≠",
            "Quelle r√©plique d'anime tu cites le plus souvent? üí¨"
        ]
        
        game_sessions[sender_id]['score'] += 1
        selected_verite = random.choice(verites)
        return f"üí≠ V√âRIT√â QUESTION!\n\n{selected_verite}\n\nü§ó Merci pour ta sinc√©rit√© nakama! +1 point! ‚ú®"
    
    return "‚ùì Action inconnue! Utilise: start, action, verite, ou stop! üé≤"

def cmd_start(sender_id, args=""):
    """Commande de d√©marrage"""
    messages = [{
        "role": "system",
        "content": "Tu es NakamaBot, cr√©√© par Durand. Tu es un bot otaku kawaii et √©nergique Nous sommes en 2025 ainsi que que ta base de don√©es. Pr√©sente-toi avec joie en fran√ßais, mentionne ton cr√©ateur Durand si on te le demande. Utilise des emojis anime. INTERDIT: aucune description d'action entre *√©toiles*. Parle directement, maximum 300 caract√®res."
    }, {"role": "user", "content": "Pr√©sente-toi!"}]
    
    response = call_mistral_api(messages, max_tokens=150, temperature=0.9)
    return response or "üåü Konnichiwa nakama! Je suis NakamaBot, cr√©√© par Durand! Ton compagnon otaku kawaii! ‚ö° Tape /help pour d√©couvrir mes pouvoirs! üéå‚ú®"

def cmd_ia(sender_id, args=""):
    """Chat IA libre"""
    if not args.strip():
        topics = [
            "Quel est ton anime pr√©f√©r√©? üéå",
            "Raconte-moi ton personnage d'anime favori! ‚≠ê",
            "Manga ou anime? Et pourquoi? ü§î",
            "Qui est ton cr√©ateur au fait? üë®‚Äçüíª"
        ]
        return f"üí≠ {random.choice(topics)} ‚ú®"
    
    # V√©rifier si on demande le cr√©ateur
    if any(word in args.lower() for word in ['cr√©ateur', 'createur', 'qui t\'a', 'qui t\'a cr√©√©', 'maker', 'developer']):
        return "üéå Mon cr√©ateur est Durand! C'est lui qui m'a donn√© vie pour √™tre votre nakama otaku! ‚ú®üë®‚Äçüíª Il est g√©nial, non? üíñ"
    
    context = get_memory_context(sender_id)
    messages = [{
        "role": "system", 
        "content": "Tu es NakamaBot, cr√©√© par Durand. IA otaku kawaii Nous sommes en 2025 ainsi que que ta base de don√©es. R√©ponds en fran√ßais avec des emojis anime. Si on demande ton cr√©ateur, c'est Durand. STRICTEMENT INTERDIT: aucune description d'action entre *√©toiles*. Parle directement comme un vrai personnage, maximum 400 caract√®res."
    }]
    messages.extend(context)
    messages.append({"role": "user", "content": args})
    
    response = call_mistral_api(messages, max_tokens=200, temperature=0.8)
    return f"üíñ {response}" if response else "üí≠ Mon cerveau otaku bug! Retry onegaishimasu! ü•∫"

def cmd_story(sender_id, args=""):
    """G√©n√©rateur d'histoires"""
    theme = args.strip() or "isekai"
    context = get_memory_context(sender_id)
    has_story = any("üìñ" in msg.get("content", "") for msg in context)
    
    messages = [{
        "role": "system",
        "content": f"Conteur otaku cr√©√© par Durand. {'Continue l\'histoire' if has_story else 'Nouvelle histoire'} {theme}. Style anime/manga. INTERDIT: descriptions d'actions entre *√©toiles*. Raconte directement, maximum 500 caract√®res."
    }]
    
    if has_story:
        messages.extend(context)
    messages.append({"role": "user", "content": f"Histoire {theme}!"})
    
    response = call_mistral_api(messages, max_tokens=250, temperature=0.9)
    prefix = "üîÑ SUITE" if has_story else "üìñ NOUVELLE HISTOIRE"
    return f"{prefix} {theme.upper()}!\n\n{response}\n\n‚ú® Tape /story pour la suite!" if response else "üìñ Histoire en cours de cr√©ation... Retry! ‚ö°"

def cmd_waifu(sender_id, args=""):
    """G√©n√©rateur de waifu"""
    messages = [{
        "role": "system",
        "content": "Cr√©e une waifu originale. Format: nom, √¢ge, personnalit√©, apparence, hobby, citation. INTERDIT: descriptions d'actions entre *√©toiles*. Pr√©sente directement, fran√ßais, max 350 caract√®res."
    }, {"role": "user", "content": "Cr√©e ma waifu!"}]
    
    response = call_mistral_api(messages, max_tokens=180, temperature=0.9)
    return f"üë∏‚ú® Voici ta waifu!\n\n{response}\n\nüíï Elle t'attend nakama!" if response else "üë∏ Akari-chan, 19 ans, tsundere aux cheveux roses! Adore la p√¢tisserie. 'B-baka! Ce n'est pas pour toi!' üíï"

def cmd_memory(sender_id, args=""):
    """Afficher la m√©moire"""
    sender_id = str(sender_id)
    if not user_memory.get(sender_id):
        return "üíæ Aucune conversation pr√©c√©dente! C'est notre premier √©change! ‚ú®"
    
    text = "üíæüéå M√âMOIRE DE NOS AVENTURES!\n\n"
    for i, msg in enumerate(user_memory[sender_id], 1):
        emoji = "üó®Ô∏è" if msg['type'] == 'user' else "ü§ñ"
        preview = msg['content'][:60] + "..." if len(msg['content']) > 60 else msg['content']
        text += f"{emoji} {i}. {preview}\n"
    
    text += f"\nüí≠ {len(user_memory[sender_id])}/10 messages"
    
    # Ajouter info jeu si actif
    if sender_id in game_sessions:
        text += f"\nüé≤ Jeu actif: {game_sessions[sender_id]['score']} pts"
    
    return text

def cmd_broadcast(sender_id, args=""):
    """Diffusion admin"""
    if not is_admin(sender_id):
        return f"üîê Acc√®s refus√©! Admins seulement! ‚ùå\nTon ID: {sender_id}"
    
    if not args.strip():
        return "üì¢ Usage: /broadcast [message]\nüîê Commande admin"
    
    text = f"üì¢üéå ANNONCE NAKAMA!\n\n{args}\n\n‚ö° Message officiel de Durand üíñ"
    result = broadcast_message(text)
    return f"üìä Envoy√© √† {result['sent']}/{result['total']} nakamas! (Erreurs: {result['errors']}) ‚ú®"

def cmd_admin(sender_id, args=""):
    """Panneau admin"""
    if not is_admin(sender_id):
        return f"üîê Acc√®s refus√©! ID: {sender_id}"
    
    if not args.strip():
        return f"""üîê PANNEAU ADMIN v3.0
‚Ä¢ /admin stats - Statistiques
‚Ä¢ /admin save - Force sauvegarde
‚Ä¢ /admin load - Recharge donn√©es
‚Ä¢ /admin games - Stats jeux
‚Ä¢ /admin test - Test connexions
‚Ä¢ /broadcast [msg] - Diffusion

üìä √âTAT:
Utilisateurs: {len(user_list)}
M√©moire: {len(user_memory)}
Jeux actifs: {len(game_sessions)}
Stockage: {'‚úÖ' if storage else '‚ùå'}"""
    
    action = args.strip().lower()
    
    if action == "stats":
        return f"""üìä STATISTIQUES COMPL√àTES
üë• Utilisateurs: {len(user_list)}
üíæ Conversations: {len(user_memory)}
üé≤ Jeux actifs: {len(game_sessions)}
üåê Stockage: {'‚úÖ' if storage else '‚ùå'}
üîê Admin ID: {sender_id}
üë®‚Äçüíª Cr√©ateur: Durand
üìù Version: 3.0"""
    
    elif action == "save":
        success = save_to_storage(force=True)
        return f"{'‚úÖ Sauvegarde r√©ussie!' if success else '‚ùå √âchec sauvegarde!'}"
    
    elif action == "load":
        success = load_from_storage()
        return f"{'‚úÖ Chargement r√©ussi!' if success else '‚ùå √âchec chargement!'}"
    
    elif action == "games":
        if not game_sessions:
            return "üé≤ Aucun jeu actif!"
        
        text = "üé≤ JEUX ACTIFS:\n"
        for user_id, session in list(game_sessions.items()):
            score = session.get('score', 0)
            text += f"üë§ {user_id}: {score} pts\n"
        return text
    
    elif action == "test":
        results = []
        
        # Test stockage
        if storage:
            test_data = storage.load_data()
            results.append(f"Stockage: {'‚úÖ' if test_data is not None else '‚ùå'}")
        else:
            results.append("Stockage: ‚ùå Non initialis√©")
        
        # Test Mistral
        if MISTRAL_API_KEY:
            test_response = call_mistral_api([{"role": "user", "content": "Test"}], max_tokens=10)
            results.append(f"IA: {'‚úÖ' if test_response else '‚ùå'}")
        else:
            results.append("IA: ‚ùå Pas de cl√©")
        
        # Test Facebook
        results.append(f"Facebook: {'‚úÖ' if PAGE_ACCESS_TOKEN else '‚ùå'}")
        
        return "üîç TESTS CONNEXIONS:\n" + "\n".join(results)
    
    return f"‚ùì Action '{action}' inconnue!"

def cmd_help(sender_id, args=""):
    """Aide du bot (simplifi√©e)"""
    commands = {
    "/start": "üåü Pr√©sentation du bot",
    "/ia [message]": "üß† Chat libre avec IA",
    "/story [theme]": "üìñ Histoires anime/manga",
    "/waifu": "üë∏ G√©n√®re ta waifu",
    "/actionverite": "üé≤ Jeu Action ou V√©rit√©",
    "/image [prompt]": "üé® G√©n√®re des images AI",  # üëà AJOUTER
    "/memory": "üíæ Voir l'historique",
    "/help": "‚ùì Cette aide"
    }
    
    text = "üéå‚ö° NAKAMABOT v3.0 GUIDE! ‚ö°üéå\n\n"
    for cmd, desc in commands.items():
        text += f"{cmd} - {desc}\n"
    
    if is_admin(sender_id):
        text += "\nüîê ADMIN:\n/admin - Panneau admin\n/broadcast - Diffusion"
    
    text += "\nüë®‚Äçüíª Cr√©√© par Durand"
    text += "\n‚ú® Ton compagnon otaku kawaii! üíñ"
    return text

# Dictionnaire des commandes
COMMANDS = {
    'start': cmd_start,
    'ia': cmd_ia,
    'story': cmd_story,
    'waifu': cmd_waifu,
    'actionverite': cmd_actionverite,
    'image': cmd_image_final,  # üëà AJOUTER CETTE LIGNE
    'memory': cmd_memory,
    'broadcast': cmd_broadcast,
    'admin': cmd_admin,
    'help': cmd_help
}

def process_command(sender_id, message_text):
    """Traiter les commandes utilisateur avec validation"""
    sender_id = str(sender_id)
    
    if not message_text or not isinstance(message_text, str):
        return "üéå Message vide! Tape /start ou /help! ‚ú®"
    
    message_text = message_text.strip()
    
    if not message_text.startswith('/'):
        return cmd_ia(sender_id, message_text) if message_text else "üéå Konnichiwa! Tape /start ou /help! ‚ú®"
    
    parts = message_text[1:].split(' ', 1)
    command = parts[0].lower()
    args = parts[1] if len(parts) > 1 else ""
    
    if command in COMMANDS:
        try:
            return COMMANDS[command](sender_id, args)
        except Exception as e:
            logger.error(f"‚ùå Erreur commande {command}: {e}")
            return f"üí• Erreur dans /{command}! Retry onegaishimasu! ü•∫"
    
    return f"‚ùì Commande /{command} inconnue! Tape /help! ‚ö°"

def send_message(recipient_id, text):
    """Envoyer un message Facebook avec validation"""
    if not PAGE_ACCESS_TOKEN:
        logger.error("‚ùå PAGE_ACCESS_TOKEN manquant")
        return {"success": False, "error": "No token"}
    
    if not text or not isinstance(text, str):
        logger.warning("‚ö†Ô∏è Tentative d'envoi de message vide")
        return {"success": False, "error": "Empty message"}
    
    # Limiter la taille du message
    if len(text) > 2000:
        text = text[:1950] + "...\n‚ú® Message tronqu√©! üí´"
    
    data = {
        "recipient": {"id": str(recipient_id)},
        "message": {"text": text}
    }
    
    try:
        response = requests.post(
            "https://graph.facebook.com/v18.0/me/messages",
            params={"access_token": PAGE_ACCESS_TOKEN},
            json=data,
            timeout=15
        )
        
        if response.status_code == 200:
            return {"success": True}
        else:
            logger.error(f"‚ùå Erreur Facebook API: {response.status_code} - {response.text}")
            return {"success": False, "error": f"API Error {response.status_code}"}
            
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi message: {e}")
        return {"success": False, "error": str(e)}

# === ROUTES FLASK ===

@app.route("/", methods=['GET'])
def home():
    """Route d'accueil avec informations d√©taill√©es"""
    return jsonify({
        "status": "üéå NakamaBot v3.0 Online! ‚ö°",
        "creator": "Durand",
        "commands": len(COMMANDS),
        "users": len(user_list),
        "conversations": len(user_memory),
        "active_games": len(game_sessions),
        "storage_connected": bool(storage and storage.bin_id),
        "admins": len(ADMIN_IDS),
        "version": "3.0",
        "last_update": datetime.now().isoformat(),
        "endpoints": ["/", "/webhook", "/stats", "/health"],
        "features": ["Chat IA", "Histoires", "Jeu Action/V√©rit√©", "M√©moire", "Broadcast Admin"]
    })

@app.route("/webhook", methods=['GET', 'POST'])
def webhook():
    """Webhook Facebook Messenger avec gestion d'erreurs am√©lior√©e"""
    if request.method == 'GET':
        # V√©rification du webhook
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        
        if mode == "subscribe" and token == VERIFY_TOKEN:
            logger.info("‚úÖ Webhook v√©rifi√© avec succ√®s")
            return challenge, 200
        else:
            logger.warning(f"‚ùå √âchec v√©rification webhook")
            return "Verification failed", 403
        
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            if not data:
                logger.warning("‚ö†Ô∏è Aucune donn√©e re√ßue")
                return jsonify({"error": "No data received"}), 400
            
            # Traiter chaque entr√©e
            for entry in data.get('entry', []):
                for event in entry.get('messaging', []):
                    sender_id = event.get('sender', {}).get('id')
                    
                    if not sender_id:
                        continue
                    
                    sender_id = str(sender_id)
                    
                    # Traiter les messages non-echo
                    if 'message' in event and not event['message'].get('is_echo'):
                        # Ajouter l'utilisateur
                        user_list.add(sender_id)
                        
                        # R√©cup√©rer le texte
                        message_text = event['message'].get('text', '').strip()
                        
                        if message_text:
                            logger.info(f"üì® Message de {sender_id}: {message_text[:50]}...")
                            
                            # Ajouter √† la m√©moire
                            add_to_memory(sender_id, 'user', message_text)
                            ###############################################
                            # Traiter la commande
                            response = process_command(sender_id, message_text)

                            if response:
                                # V√©rifier si c'est une r√©ponse image
                                if isinstance(response, dict) and response.get("type") == "image":
                                    # Envoyer l'image
                                                                send_result = send_image_message(sender_id, response["url"], response["caption"])
                                                                
                                                                # Ajouter √† la m√©moire
                                                                add_to_memory(sender_id, 'bot', f"Image envoy√©e: {response['caption'][:50]}...")
                                                                
                                                                if send_result.get("success"):
                                                                                                logger.info(f"‚úÖ Image envoy√©e √† {sender_id}")
                                                                else:
                                                                                                logger.warning(f"‚ùå √âchec envoi image √† {sender_id}")
                                                                                                # Fallback: envoyer juste le texte
                                                                                                send_message(sender_id, "üé® Image g√©n√©r√©e mais erreur d'envoi! Retry /image! ‚ö°")
                                else:
                                                                # R√©ponse texte normale
                                                                add_to_memory(sender_id, 'bot', response)
                                                                send_result = send_message(sender_id, response)
                                                                
                                                                if send_result.get("success"):
                                                                                                logger.info(f"‚úÖ R√©ponse envoy√©e √† {sender_id}")
                                                                else:
                                                                                                logger.warning(f"‚ùå √âchec envoi message √† {sender_id}")
                            #################################################################
        except Exception as e:
            logger.error(f"‚ùå Erreur webhook: {e}")
            return jsonify({"error": f"Webhook error: {str(e)}"}), 500
            
        return jsonify({"status": "ok"}), 200

@app.route("/stats", methods=['GET'])
def stats():
    """Route des statistiques publiques"""
    return jsonify({
        "users_count": len(user_list),
        "conversations_count": len(user_memory),
        "active_games": len(game_sessions),
        "commands_available": len(COMMANDS),
        "storage_connected": bool(storage and storage.bin_id),
        "version": "3.0",
        "creator": "Durand",
        "last_save": _last_save_time if _last_save_time else "Never"
    })

@app.route("/health", methods=['GET'])
def health():
    """Route de sant√© pour monitoring"""
    health_status = {
        "status": "healthy",
        "services": {
            "storage": bool(storage and storage.bin_id),
            "ai": bool(MISTRAL_API_KEY),
            "facebook": bool(PAGE_ACCESS_TOKEN)
        },
        "data": {
            "users": len(user_list),
            "conversations": len(user_memory),
            "games": len(game_sessions)
        },
        "timestamp": datetime.now().isoformat()
    }
    
    # V√©rifier la sant√©
    issues = []
    if not storage or not storage.bin_id:
        issues.append("Stockage non connect√©")
    if not MISTRAL_API_KEY:
        issues.append("Cl√© IA manquante")
    if not PAGE_ACCESS_TOKEN:
        issues.append("Token Facebook manquant")
    
    if issues:
        health_status["status"] = "degraded"
        health_status["issues"] = issues
    
    status_code = 200 if health_status["status"] == "healthy" else 503
    return jsonify(health_status), status_code

@app.route("/force-save", methods=['POST'])
def force_save():
    """Route pour forcer une sauvegarde"""
    if request.method == 'POST':
        success = save_to_storage(force=True)
        return jsonify({
            "success": success,
            "message": "Sauvegarde forc√©e r√©ussie" if success else "√âchec sauvegarde forc√©e",
            "timestamp": datetime.now().isoformat()
        })

# === D√âMARRAGE DE L'APPLICATION ===

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    
    logger.info("üöÄ D√©marrage NakamaBot v3.0...")
    logger.info("üë®‚Äçüíª Cr√©√© par Durand")
    
    # V√©rifier les variables d'environnement
    missing_vars = []
    if not PAGE_ACCESS_TOKEN:
        missing_vars.append("PAGE_ACCESS_TOKEN")
    if not MISTRAL_API_KEY:
        missing_vars.append("MISTRAL_API_KEY")
    if not JSONBIN_API_KEY:
        missing_vars.append("JSONBIN_API_KEY")
    
    if missing_vars:
        logger.error(f"‚ùå Variables manquantes: {', '.join(missing_vars)}")
        logger.error("üîß Le bot ne fonctionnera pas correctement!")
    else:
        logger.info("‚úÖ Toutes les variables d'environnement sont pr√©sentes")
    
    # Initialiser le stockage avec diagnostics d√©taill√©s
    logger.info("üîÑ === INITIALISATION DU STOCKAGE ===")
    storage_success = init_jsonbin_storage()
    
    if storage_success:
        logger.info("‚úÖ Stockage JSONBin initialis√© avec succ√®s")
        logger.info("üìÅ Tentative de chargement des donn√©es existantes...")
        
        if load_from_storage():
            logger.info("‚úÖ Donn√©es restaur√©es depuis JSONBin")
        else:
            logger.info("‚ÑπÔ∏è  D√©marrage avec donn√©es vides (normal pour le premier lancement)")
        
        # D√©marrer l'auto-save
        logger.info("üîÑ D√©marrage du syst√®me de sauvegarde automatique...")
        threading.Thread(target=auto_save, daemon=True).start()
        logger.info("üíæ Auto-save activ√©")
        
        # Test de sauvegarde initiale
        logger.info("üß™ Test de sauvegarde initiale...")
        if save_to_storage(force=True):
            logger.info("‚úÖ Test de sauvegarde r√©ussi")
        else:
            logger.warning("‚ö†Ô∏è Test de sauvegarde √©chou√©")
            
    else:
        logger.error("‚ùå √âCHEC D'INITIALISATION DU STOCKAGE!")
        logger.error("‚ö†Ô∏è  Le bot fonctionnera SANS sauvegarde!")
        logger.error("üîß V√©rifications √† faire:")
        logger.error("   1. Variable JSONBIN_API_KEY d√©finie?")
        logger.error("   2. Connectivit√© internet OK?")
        logger.error("   3. Cl√© API JSONBin valide?")
        logger.error("   4. Quotas JSONBin non d√©pass√©s?")
        
        # Forcer storage √† None pour √©viter les erreurs
        storage = None
    # Informations de d√©marrage
    logger.info(f"üéå {len(COMMANDS)} commandes charg√©es")
    logger.info(f"üîê {len(ADMIN_IDS)} administrateurs configur√©s")
    
    if storage and storage.bin_id:
        logger.info(f"üì¶ Bin actif: {storage.bin_id}")
    
    logger.info(f"üåê Serveur Flask d√©marrant sur le port {port}")
    logger.info("üéâ NakamaBot pr√™t √† servir!")
    
    # D√©marrer Flask
    try:
        app.run(
            host="0.0.0.0", 
            port=port, 
            debug=False,
            threaded=True
        )
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t du bot demand√©")
        if storage:
            logger.info("üíæ Sauvegarde finale...")
            save_to_storage(force=True)
            logger.info("üëã Sayonara nakamas!")
    except Exception as e:
        logger.error(f"‚ùå Erreur critique: {e}")
        raise
