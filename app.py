import os
import logging
import json
import random
import inspect
from flask import Flask, request, jsonify
import requests
from datetime import datetime
from collections import defaultdict, deque
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaIoBaseUpload
import io
import threading
import time

# Configuration du logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# üîë Configuration
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "nakamaverifytoken")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN", "")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY", "")

# üîê Configuration Admin et Google Drive
ADMIN_IDS = set(os.getenv("ADMIN_IDS", "").split(","))  # IDs des admins s√©par√©s par virgules
GOOGLE_DRIVE_CREDENTIALS = os.getenv("GOOGLE_DRIVE_CREDENTIALS", "")  # JSON des credentials
DRIVE_FOLDER_ID = os.getenv("DRIVE_FOLDER_ID", "")  # ID du dossier Drive

# üíæ SYST√àME DE M√âMOIRE
user_memory = defaultdict(lambda: deque(maxlen=10))  # Garde les 10 derniers messages par user
user_list = set()  # Liste des utilisateurs pour broadcast

# üåê Service Google Drive
drive_service = None

def init_google_drive():
    """Initialise le service Google Drive"""
    global drive_service
    
    if not GOOGLE_DRIVE_CREDENTIALS or not DRIVE_FOLDER_ID:
        logger.warning("‚ö†Ô∏è Google Drive non configur√© - Les donn√©es ne seront pas sauvegard√©es")
        return False
    
    try:
        # Parser les credentials JSON
        if GOOGLE_DRIVE_CREDENTIALS.startswith('{'):
            credentials_info = json.loads(GOOGLE_DRIVE_CREDENTIALS)
        else:
            # Si c'est un fichier
            with open(GOOGLE_DRIVE_CREDENTIALS, 'r') as f:
                credentials_info = json.load(f)
        
        # Cr√©er les credentials
        credentials = Credentials.from_service_account_info(
            credentials_info,
            scopes=['https://www.googleapis.com/auth/drive']
        )
        
        # Cr√©er le service
        drive_service = build('drive', 'v3', credentials=credentials)
        
        logger.info("‚úÖ Google Drive initialis√© avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation Google Drive: {e}")
        return False

def save_memory_to_drive():
    """Sauvegarde la m√©moire sur Google Drive"""
    if not drive_service:
        return False
    
    try:
        # Pr√©parer les donn√©es √† sauvegarder
        memory_data = {
            'user_memory': {},
            'user_list': list(user_list),
            'timestamp': datetime.now().isoformat()
        }
        
        # Convertir deque en list pour JSON
        for user_id, messages in user_memory.items():
            memory_data['user_memory'][user_id] = list(messages)
        
        # Cr√©er le fichier JSON
        json_data = json.dumps(memory_data, indent=2, ensure_ascii=False)
        file_stream = io.StringIO(json_data)
        
        # Chercher si le fichier existe d√©j√†
        filename = "nakamabot_memory.json"
        query = f"name='{filename}' and parents in '{DRIVE_FOLDER_ID}'"
        results = drive_service.files().list(q=query).execute()
        files = results.get('files', [])
        
        media = MediaIoBaseUpload(
            io.BytesIO(json_data.encode('utf-8')),
            mimetype='application/json'
        )
        
        if files:
            # Mettre √† jour le fichier existant
            file_id = files[0]['id']
            drive_service.files().update(
                fileId=file_id,
                media_body=media
            ).execute()
            logger.info(f"üíæ M√©moire mise √† jour sur Drive (ID: {file_id})")
        else:
            # Cr√©er un nouveau fichier
            file_metadata = {
                'name': filename,
                'parents': [DRIVE_FOLDER_ID]
            }
            file = drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            logger.info(f"üíæ Nouvelle sauvegarde cr√©√©e sur Drive (ID: {file.get('id')})")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde Drive: {e}")
        return False

def load_memory_from_drive():
    """Charge la m√©moire depuis Google Drive"""
    global user_memory, user_list
    
    if not drive_service:
        return False
    
    try:
        # Chercher le fichier de m√©moire
        filename = "nakamabot_memory.json"
        query = f"name='{filename}' and parents in '{DRIVE_FOLDER_ID}'"
        results = drive_service.files().list(q=query).execute()
        files = results.get('files', [])
        
        if not files:
            logger.info("üìÅ Aucune sauvegarde trouv√©e sur Drive")
            return False
        
        # T√©l√©charger le fichier
        file_id = files[0]['id']
        request = drive_service.files().get_media(fileId=file_id)
        file_stream = io.BytesIO()
        downloader = MediaIoBaseDownload(file_stream, request)
        
        done = False
        while done is False:
            status, done = downloader.next_chunk()
        
        # Parser les donn√©es
        file_stream.seek(0)
        memory_data = json.loads(file_stream.read().decode('utf-8'))
        
        # Restaurer la m√©moire
        user_memory.clear()
        for user_id, messages in memory_data.get('user_memory', {}).items():
            user_memory[user_id] = deque(messages, maxlen=3)
        
        # Restaurer la liste d'utilisateurs
        user_list.update(memory_data.get('user_list', []))
        
        saved_time = memory_data.get('timestamp', 'Inconnu')
        logger.info(f"‚úÖ M√©moire charg√©e depuis Drive - Sauvegarde du {saved_time}")
        logger.info(f"üìä {len(user_memory)} utilisateurs et {len(user_list)} contacts restaur√©s")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur chargement Drive: {e}")
        return False

def auto_save_memory():
    """Sauvegarde automatique p√©riodique"""
    def save_loop():
        while True:
            time.sleep(300)  # Sauvegarder toutes les 5 minutes
            if user_memory or user_list:
                success = save_memory_to_drive()
                if success:
                    logger.info("üîÑ Sauvegarde automatique r√©ussie")
    
    if drive_service:
        thread = threading.Thread(target=save_loop, daemon=True)
        thread.start()
        logger.info("üîÑ Sauvegarde automatique activ√©e (toutes les 5 min)")

# Validation des tokens
if not PAGE_ACCESS_TOKEN:
    logger.error("‚ùå PAGE_ACCESS_TOKEN is missing!")
else:
    logger.info(f"‚úÖ PAGE_ACCESS_TOKEN configur√©")

if not MISTRAL_API_KEY:
    logger.error("‚ùå MISTRAL_API_KEY is missing!")
else:
    logger.info("‚úÖ MISTRAL_API_KEY configur√©")

# Validation Admin
if ADMIN_IDS and list(ADMIN_IDS)[0]:  # V√©rifier que ce n'est pas juste une cha√Æne vide
    logger.info(f"üîê {len(ADMIN_IDS)} administrateurs configur√©s")
else:
    logger.warning("‚ö†Ô∏è Aucun administrateur configur√© - Broadcast d√©sactiv√©")

# Configuration Mistral API
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
MISTRAL_MODEL = "mistral-medium"  # ou "mistral-small" pour √©conomiser

def call_mistral_api(messages, max_tokens=200, temperature=0.8):
    """Appel g√©n√©rique √† l'API Mistral"""
    if not MISTRAL_API_KEY:
        return None
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {MISTRAL_API_KEY}"
    }
    
    data = {
        "model": MISTRAL_MODEL,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature
    }
    
    try:
        response = requests.post(
            MISTRAL_API_URL,
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            logger.error(f"Erreur Mistral API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"Exception Mistral API: {e}")
        return None

def add_to_memory(user_id, message_type, content):
    """Ajoute un message √† la m√©moire de l'utilisateur et sauvegarde"""
    user_memory[user_id].append({
        'type': message_type,  # 'user' ou 'bot'
        'content': content,
        'timestamp': datetime.now().isoformat()
    })
    logger.info(f"üíæ M√©moire {user_id}: {len(user_memory[user_id])} messages")
    
    # Sauvegarde asynchrone
    if drive_service:
        threading.Thread(target=save_memory_to_drive, daemon=True).start()

def get_memory_context(user_id):
    """R√©cup√®re le contexte des messages pr√©c√©dents"""
    if user_id not in user_memory or not user_memory[user_id]:
        return []
    
    context = []
    for msg in user_memory[user_id]:
        role = "user" if msg['type'] == 'user' else "assistant"
        context.append({
            "role": role,
            "content": msg['content']
        })
    
    return context

def is_admin(user_id):
    """V√©rifie si un utilisateur est administrateur"""
    return str(user_id) in ADMIN_IDS

def broadcast_message(message_text):
    """Envoie un message √† tous les utilisateurs connus"""
    success_count = 0
    total_users = len(user_list)
    
    logger.info(f"üì¢ Broadcast √† {total_users} utilisateurs: {message_text}")
    
    for user_id in user_list.copy():  # Copie pour √©viter les modifications pendant l'it√©ration
        result = send_message(user_id, message_text)
        if result.get("success"):
            success_count += 1
        else:
            logger.warning(f"‚ö†Ô∏è √âchec broadcast pour {user_id}")
    
    logger.info(f"üìä Broadcast termin√©: {success_count}/{total_users} succ√®s")
    return {"sent": success_count, "total": total_users}

# üé≠ Dictionnaire des commandes (auto-g√©n√©r√©)
COMMANDS = {}

def command(name, description):
    """D√©corateur pour enregistrer automatiquement les commandes"""
    def decorator(func):
        COMMANDS[name] = {
            'function': func,
            'description': description,
            'name': name
        }
        return func
    return decorator

# üéå SYST√àME DE COMMANDES MODULAIRES üéå

@command('start', 'üåü Pr√©sentation √©pique du bot en mode anime opening!')
def cmd_start(sender_id, message_text=""):
    """Pr√©sentation immersive style anime opening"""
    messages = [{
        "role": "system",
        "content": """Tu es NakamaBot, un bot otaku kawaii et √©nergique. Cr√©e une pr√©sentation √©pique style anime opening en fran√ßais, sans d'ecrire se que tu fais avec :
        - Beaucoup d'emojis anime/manga
        - Style √©nergique comme Luffy ou Naruto
        - Pr√©sente tes capacit√©s de fa√ßon cool
        - Maximum 300 caract√®res
        - Termine par une phrase motivante d'anime"""
    }, {
        "role": "user", 
        "content": "Pr√©sente-toi de fa√ßon √©pique !"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=150, temperature=0.9)
    
    if ai_response:
        return f"üéå {ai_response}\n\n‚ú® Tape /help pour d√©couvrir toutes mes techniques secr√®tes, nakama! ‚ö°"
    else:
        return "üåü Konnichiwa, nakama! Je suis NakamaBot! ‚ö°\nüéØ Ton compagnon otaku ultime pour parler anime, manga et bien plus!\n‚ú® Tape /help pour mes super pouvoirs! üöÄ"

@command('ia', 'üß† Discussion libre avec une IA otaku kawaii (avec m√©moire persistante!)')
def cmd_ia(sender_id, message_text=""):
    """Chat libre avec personnalit√© otaku et m√©moire contextuelle"""
    # Si pas de texte, engage la conversation
    if not message_text.strip():
        topics = [
            "Quel est ton anime pr√©f√©r√© de cette saison?",
            "Si tu pouvais √™tre transport√© dans un isekai, lequel choisirais-tu?",
            "Raconte-moi ton personnage d'anime favori!",
            "Manga ou anime? Et pourquoi? ü§î",
            "As-tu d√©j√† r√™v√© d'avoir un stand de JoJo?"
        ]
        return f"üí≠ {random.choice(topics)} ‚ú®"
    
    # R√©cup√©rer le contexte des messages pr√©c√©dents
    memory_context = get_memory_context(sender_id)
    
    # Construire les messages avec contexte
    messages = [{
        "role": "system",
        "content": """Tu es NakamaBot, une IA otaku kawaii et √©nergique. Tu as une m√©moire persistante des conversations pr√©c√©dentes. R√©ponds en fran√ßais sans d'ecrire se que tu fais avec:
        - Personnalit√© m√©lange de Nezuko (mignon), Megumin (dramatique), et Zero Two (taquine)
        - Beaucoup d'emojis anime
        - R√©f√©rences anime/manga naturelles
        - Style parfois tsundere ou badass selon le contexte
        - Utilise le contexte des messages pr√©c√©dents pour une conversation fluide
        - Maximum 400 caract√®res"""
    }]
    
    # Ajouter le contexte des messages pr√©c√©dents
    messages.extend(memory_context)
    
    # Ajouter le nouveau message
    messages.append({
        "role": "user",
        "content": message_text
    })
    
    ai_response = call_mistral_api(messages, max_tokens=200, temperature=0.8)
    
    if ai_response:
        return f"üíñ {ai_response}"
    else:
        return "üí≠ Mon cerveau otaku bug un peu l√†... Retry, onegaishimasu! ü•∫"

@command('story', 'üìñ Histoires courtes isekai/shonen sur mesure (avec suite persistante!)')
def cmd_story(sender_id, message_text=""):
    """Histoires courtes personnalis√©es avec continuit√©"""
    theme = message_text.strip() or "isekai"
    
    # R√©cup√©rer le contexte pour continuer une histoire
    memory_context = get_memory_context(sender_id)
    
    # V√©rifier s'il y a une histoire en cours
    has_previous_story = any("üìñ" in msg.get("content", "") for msg in memory_context)
    
    messages = [{
        "role": "system",
        "content": f"""Tu es un conteur otaku. {'Continue l\'histoire pr√©c√©dente' if has_previous_story else '√âcris une nouvelle histoire'} {theme} sans d'ecrire se que tu fais avec :
        - Protagoniste attachant
        - Situation int√©ressante
        - Style anime/manga
        - {'Suite logique de l\'histoire' if has_previous_story else 'D√©but captivant'}
        - Maximum 500 caract√®res
        - Beaucoup d'action et d'√©motion"""
    }]
    
    # Ajouter le contexte si histoire en cours
    if has_previous_story:
        messages.extend(memory_context)
    
    messages.append({
        "role": "user",
        "content": f"{'Continue l\'histoire' if has_previous_story else 'Raconte-moi une histoire'} {theme}!"
    })
    
    ai_response = call_mistral_api(messages, max_tokens=250, temperature=0.9)
    
    if ai_response:
        continuation_text = "üîÑ SUITE" if has_previous_story else "üìñ‚ö° NOUVELLE HISTOIRE"
        return f"{continuation_text} {theme.upper()}!\n\n{ai_response}\n\n‚ú® Tape /story pour la suite!"
    else:
        return "üìñ Akira se r√©veille dans un monde magique o√π ses connaissances d'otaku deviennent des sorts! Son premier ennemi? Un d√©mon qui d√©teste les animes! 'Maudit otaku!' crie-t-il. Akira sourit: 'KAMEHAMEHA!' ‚ö°‚ú®"

@command('memory', 'üíæ Voir l\'historique persistant de nos conversations!')
def cmd_memory(sender_id, message_text=""):
    """Affiche la m√©moire des conversations"""
    if sender_id not in user_memory or not user_memory[sender_id]:
        return "üíæ Aucune conversation pr√©c√©dente, nakama! C'est notre premier √©change! ‚ú®"
    
    memory_text = "üíæüéå M√âMOIRE PERSISTANTE DE NOS AVENTURES!\n\n"
    
    for i, msg in enumerate(user_memory[sender_id], 1):
        emoji = "üó®Ô∏è" if msg['type'] == 'user' else "ü§ñ"
        content_preview = msg['content'][:80] + "..." if len(msg['content']) > 80 else msg['content']
        memory_text += f"{emoji} {i}. {content_preview}\n"
    
    memory_text += f"\nüí≠ {len(user_memory[sender_id])}/3 messages en m√©moire"
    memory_text += "\nüåê Sauvegard√© sur Google Drive automatiquement!"
    memory_text += "\n‚ú® Je me souviens de tout, m√™me apr√®s red√©marrage!"
    
    return memory_text

@command('broadcast', 'üì¢ [ADMIN ONLY] Envoie un message √† tous les nakamas!')
def cmd_broadcast(sender_id, message_text=""):
    """Fonction broadcast s√©curis√©e pour admins seulement"""
    # üîê V√âRIFICATION ADMIN OBLIGATOIRE
    if not is_admin(sender_id):
        return "üîê Acc√®s refus√©! Seuls les admins peuvent utiliser cette commande, nakama! ‚ùå\n‚ú® Tu n'as pas les permissions n√©cessaires."
    
    if not message_text.strip():
        return "üì¢ Usage: /broadcast [message]\n‚ö†Ô∏è Envoie √† TOUS les utilisateurs!\nüîê Commande admin seulement"
    
    # Message style NakamaBot avec signature admin
    broadcast_text = f"üì¢üéå ANNONCE ADMIN NAKAMA!\n\n{message_text}\n\n‚ö° - Message officiel des admins NakamaBot üíñ"
    
    result = broadcast_message(broadcast_text)
    
    return f"üìä Broadcast admin envoy√© √† {result['sent']}/{result['total']} nakamas! ‚ú®\nüîê Action enregistr√©e comme admin."

@command('waifu', 'üë∏ G√©n√®re ta waifu parfaite avec IA!')
def cmd_waifu(sender_id, message_text=""):
    """G√©n√®re une waifu unique"""
    messages = [{
        "role": "system",
        "content": """Cr√©e une waifu originale sans d'ecrire se que tu fais avec :
        - Nom japonais mignon
        - √Çge (18-25 ans)
        - Personnalit√© unique (kuudere, tsundere, dandere, etc.)
        - Apparence br√®ve mais marquante
        - Hobby/talent sp√©cial 
        - Une phrase qu'elle dirait
        Format en fran√ßais, style kawaii, max 350 caract√®res"""
    }, {
        "role": "user",
        "content": "Cr√©e ma waifu parfaite!"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=180, temperature=0.9)
    
    if ai_response:
        return f"üë∏‚ú® Voici ta waifu g√©n√©r√©e!\n\n{ai_response}\n\nüíï Elle t'attend, nakama!"
    else:
        return "üë∏ Akari-chan, 19 ans, tsundere aux cheveux roses! Elle adore la p√¢tisserie mais fait semblant de ne pas s'int√©resser √† toi... 'B-baka! Ce n'est pas comme si j'avais fait ces cookies pour toi!' üíï"

@command('husbando', 'ü§µ G√©n√®re ton husbando de r√™ve!')
def cmd_husbando(sender_id, message_text=""):
    """G√©n√®re un husbando unique"""
    messages = [{
        "role": "system", 
        "content": """Cr√©e un husbando original sans d'ecrire se que tu fais avec :
        - Nom japonais cool
        - √Çge (20-28 ans)
        - Type de personnalit√© (kuudere, sto√Øque, protecteur, etc.)
        - Apparence marquante
        - M√©tier/talent
        - Citation caract√©ristique
        Format fran√ßais, style badass/romantique, max 350 caract√®res"""
    }, {
        "role": "user",
        "content": "Cr√©e mon husbando parfait!"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=180, temperature=0.9)
    
    if ai_response:
        return f"ü§µ‚ö° Ton husbando t'attend!\n\n{ai_response}\n\nüíô Il ne te d√©cevra jamais!"
    else:
        return "ü§µ Takeshi, 24 ans, capitaine sto√Øque aux yeux d'acier! √âp√©iste l√©gendaire qui cache un c≈ìur tendre. 'Je prot√©gerai toujours ceux qui me sont chers... y compris toi.' ‚öîÔ∏èüíô"

@command('animequiz', 'üß© Quiz √©pique sur les anime!')
def cmd_animequiz(sender_id, message_text=""):
    """Quiz anime interactif"""
    # Si c'est une r√©ponse, on la traite (simplifi√©e pour cet exemple)
    if message_text.strip():
        return f"üéØ R√©ponse re√ßue: '{message_text}'\nüí° Nouveau quiz en arrivant! Tape /animequiz ‚ö°"
    
    messages = [{
        "role": "system",
        "content": """Cr√©e un quiz anime original sans d'ecrire se que tu fais avec :
        - Question int√©ressante sur anime/manga populaire
        - 3 choix multiples A, B, C
        - Difficult√© moyenne
        - Style √©nergique
        - Maximum 300 caract√®res
        Format: Question + choix A/B/C"""
    }, {
        "role": "user",
        "content": "Cr√©e un quiz anime!"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=150, temperature=0.8)
    
    if ai_response:
        return f"üß©‚ö° QUIZ TIME!\n\n{ai_response}\n\nüéØ R√©ponds-moi, nakama!"
    else:
        return "üß© Dans quel anime trouve-t-on les 'Piliers'?\nA) Attack on Titan\nB) Demon Slayer\nC) Naruto\n\n‚ö° √Ä toi de jouer!"

@command('otakufact', 'üìö Fun facts otaku ultra int√©ressants!')
def cmd_otakufact(sender_id, message_text=""):
    """Fun facts otaku"""
    messages = [{
        "role": "system",
        "content": """Donne un fun fact otaku int√©ressant sans d'ecrire se que tu fais sur :
        - Anime, manga, culture japonaise, studios d'animation
        - Fait surprenant et v√©ridique
        - Style enthousiaste avec emojis
        - Maximum 250 caract√®res
        - Commence par 'Saviez-vous que...'"""
    }, {
        "role": "user",
        "content": "Donne-moi un fun fact otaku!"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=120, temperature=0.7)
    
    if ai_response:
        return f"üìö‚ú® OTAKU FACT!\n\n{ai_response}\n\nü§ì Incroyable, non?"
    else:
        return "üìö Saviez-vous que Akira Toriyama a cr√©√© Dragon Ball en s'inspirant du 'Voyage vers l'Ouest', un classique chinois? Son Goku = Sun Wukong! üêí‚ö°"

@command('recommend', 'üé¨ Recommandations anime/manga personnalis√©es!')
def cmd_recommend(sender_id, message_text=""):
    """Recommandations selon genre"""
    genre = message_text.strip() or "al√©atoire"
    
    messages = [{
        "role": "system",
        "content": f"""Recommande 2-3 anime/manga du genre '{genre}' avec :
        - Titres populaires ou cach√©s
        - Courte description enthousiaste de chacun
        - Pourquoi c'est g√©nial
        - Style otaku passionn√©
        - Maximum 400 caract√®res"""
    }, {
        "role": "user",
        "content": f"Recommande-moi des anime {genre}!"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=200, temperature=0.8)
    
    if ai_response:
        return f"üé¨‚ú® RECOMMANDATIONS {genre.upper()}!\n\n{ai_response}\n\n‚≠ê Bon visionnage, nakama!"
    else:
        return f"üé¨ Pour {genre}:\n‚Ä¢ Attack on Titan - Epic & sombre! ‚öîÔ∏è\n‚Ä¢ Your Name - Romance qui fait pleurer üò≠\n‚Ä¢ One Piece - Aventure infinie! üè¥‚Äç‚ò†Ô∏è\n\nBon anime time! ‚ú®"

@command('translate', 'üåê Traduction otaku FR ‚Üî JP avec style!')
def cmd_translate(sender_id, message_text=""):
    """Traduction avec style otaku"""
    if not message_text.strip():
        return "üåê Utilisation: /translate [texte √† traduire]\nüí° Ex: /translate konnichiwa nakama!\n‚ú® Je traduis FR‚ÜíJP et JP‚ÜíFR!"
    
    messages = [{
        "role": "system",
        "content": """Tu es un traducteur otaku sp√©cialis√©. Traduis le texte donn√© :
        - Si c'est en fran√ßais ‚Üí traduis en japonais (avec romaji)
        - Si c'est en japonais/romaji ‚Üí traduis en fran√ßais
        - Ajoute le contexte anime/manga si pertinent
        - Style enthousiaste avec emojis
        - Maximum 300 caract√®res"""
    }, {
        "role": "user",
        "content": f"Traduis: {message_text}"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=150, temperature=0.7)
    
    if ai_response:
        return f"üåê‚ú® TRADUCTION!\n\n{ai_response}\n\nüìù Arigatou gozaimasu!"
    else:
        return f"üåê Traduction basique:\n'{message_text}'\n\nüí≠ D√©sol√©, mon dictionnaire otaku fait une pause! ü•∫"

@command('mood', 'üòä Analyseur d\'humeur otaku + conseils anime!')
def cmd_mood(sender_id, message_text=""):
    """Analyse l'humeur et recommande selon le mood"""
    if not message_text.strip():
        return "üòä Comment tu te sens aujourd'hui, nakama?\nüí° Ex: /mood je suis triste\n‚ú® Je vais analyser ton mood et te conseiller!"
    
    messages = [{
        "role": "system",
        "content": """Analyse l'humeur de l'utilisateur sans d'ecrire se que tu fais et recommande  :
        - Identification de l'√©motion principale
        - 1-2 anime/manga adapt√©s √† ce mood
        - Phrase de r√©confort style anime
        - Emojis appropri√©s
        - Style empathique et otaku
        - Maximum 350 caract√®res"""
    }, {
        "role": "user",
        "content": f"Mon mood: {message_text}"
    }]
    
    ai_response = call_mistral_api(messages, max_tokens=180, temperature=0.8)
    
    if ai_response:
        return f"üòäüí´ ANALYSE MOOD!\n\n{ai_response}\n\nü§ó Tu n'es pas seul, nakama!"
    else:
        return f"üòä Je sens que tu as besoin de r√©confort!\nüé¨ Regarde 'Your Name' ou 'Spirited Away'\nüíù Tout ira mieux, nakama! Ganbatte!"

@command('admin', 'üîê [ADMIN] Commandes d\'administration du bot!')
def cmd_admin(sender_id, message_text=""):
    """Commandes d'administration s√©curis√©es"""
    if not is_admin(sender_id):
        return "üîê Acc√®s refus√©! Tu n'es pas administrateur, nakama! ‚ùå"
    
    if not message_text.strip():
        return """üîê‚ö° PANNEAU ADMIN NAKAMABOT! ‚ö°üîê

üìä Commandes disponibles:
‚Ä¢ /admin stats - Statistiques d√©taill√©es
‚Ä¢ /admin users - Liste des utilisateurs  
‚Ä¢ /admin save - Force la sauvegarde Drive
‚Ä¢ /admin load - Recharge depuis Drive
‚Ä¢ /admin memory - Stats m√©moire globale
‚Ä¢ /broadcast [message] - Diffusion g√©n√©rale

üåê Google Drive: {'‚úÖ Connect√©' if drive_service else '‚ùå D√©connect√©'}
üíæ Utilisateurs en m√©moire: {len(user_memory)}
üì± Utilisateurs actifs: {len(user_list)}

‚ö° Tu as le pouvoir, admin-sama! üíñ"""
    
    action = message_text.strip().lower()
    
    if action == "stats":
        total_messages = sum(len(messages) for messages in user_memory.values())
        return f"""üìäüîê STATISTIQUES ADMIN

üë• Utilisateurs total: {len(user_list)}
üíæ Utilisateurs avec m√©moire: {len(user_memory)}
üí¨ Messages total stock√©s: {total_messages}
üåê Google Drive: {'‚úÖ Op√©rationnel' if drive_service else '‚ùå Indisponible'}
üîê Admins configur√©s: {len(ADMIN_IDS)}

üéå Commandes ex√©cut√©es: {len(COMMANDS)}
‚ö° Bot status: Op√©rationnel depuis le d√©marrage
üíñ Ready to serve, admin-sama!"""
    
    elif action == "users":
        if not user_list:
            return "üë• Aucun utilisateur enregistr√© pour le moment!"
        
        user_text = "üë•üîê LISTE DES UTILISATEURS:\n\n"
        for i, user_id in enumerate(list(user_list)[:10], 1):  # Limite √† 10 pour √©viter les messages trop longs
            admin_marker = " üîê" if is_admin(user_id) else ""
            memory_count = len(user_memory.get(user_id, []))
            user_text += f"{i}. {user_id}{admin_marker} ({memory_count} msg)\n"
        
        if len(user_list) > 10:
            user_text += f"\n... et {len(user_list) - 10} autres utilisateurs"
        
        return user_text
    
    elif action == "save":
        if not drive_service:
            return "‚ùå Google Drive non configur√©! Impossible de sauvegarder."
        
        success = save_memory_to_drive()
        if success:
            return f"‚úÖ Sauvegarde forc√©e r√©ussie!\nüíæ {len(user_memory)} utilisateurs et {len(user_list)} contacts sauvegard√©s"
        else:
            return "‚ùå √âchec de la sauvegarde! V√©rifiez les logs."
    
    elif action == "load":
        if not drive_service:
            return "‚ùå Google Drive non configur√©! Impossible de charger."
        
        success = load_memory_from_drive()
        if success:
            return f"‚úÖ M√©moire recharg√©e depuis Drive!\nüíæ {len(user_memory)} utilisateurs et {len(user_list)} contacts restaur√©s"
        else:
            return "‚ùå √âchec du chargement! Aucune sauvegarde trouv√©e ou erreur."
    
    elif action == "memory":
        memory_details = []
        for user_id, messages in list(user_memory.items())[:5]:  # Top 5
            last_msg = messages[-1]['timestamp'] if messages else "Jamais"
            memory_details.append(f"‚Ä¢ {user_id}: {len(messages)} msg (derni√®re: {last_msg[:10]})")
        
        return f"""üíæüîê M√âMOIRE GLOBALE:

üìä Total utilisateurs: {len(user_memory)}
üí¨ Messages en m√©moire: {sum(len(m) for m in user_memory.values())}

üîù Top 5 utilisateurs actifs:
{chr(10).join(memory_details)}

üåê Sauvegarde auto: {'‚úÖ Active' if drive_service else '‚ùå D√©sactiv√©e'}
üíæ Limite par utilisateur: 3 messages"""
    
    else:
        return f"‚ùì Action '{action}' inconnue!\nüí° Tape /admin pour voir les commandes disponibles."

@command('help', '‚ùì Guide complet de toutes mes techniques secr√®tes!')
def cmd_help(sender_id, message_text=""):
    """G√©n√®re automatiquement l'aide bas√©e sur toutes les commandes"""
    help_text = "üéå‚ö° NAKAMA BOT - GUIDE ULTIME! ‚ö°üéå\n\n"
    
    # S√©parer les commandes admin et utilisateur
    user_commands = []
    admin_commands = []
    
    for cmd_name, cmd_info in COMMANDS.items():
        if "[ADMIN" in cmd_info['description']:
            admin_commands.append(f"/{cmd_name} - {cmd_info['description']}")
        else:
            user_commands.append(f"/{cmd_name} - {cmd_info['description']}")
    
    # Afficher les commandes utilisateur
    for cmd in user_commands:
        help_text += f"{cmd}\n"
    
    # Afficher les commandes admin seulement si l'utilisateur est admin
    if is_admin(sender_id) and admin_commands:
        help_text += f"\nüîê COMMANDES ADMIN:\n"
        for cmd in admin_commands:
            help_text += f"{cmd}\n"
    
    help_text += "\nüî• Utilisation: Tape / + commande"
    help_text += "\nüí° Ex: /waifu, /ia salut!, /recommend shonen"
    help_text += "\nüíæ M√©moire persistante: Les 3 derniers messages sauvegard√©s!"
    help_text += "\nüåê Sauvegarde Google Drive automatique"
    
    if is_admin(sender_id):
        help_text += f"\nüîê Statut admin confirm√© - Acc√®s total d√©bloqu√©!"
    
    help_text += "\n\n‚ö° Powered by Mistral AI + Google Drive - Cr√©√© avec amour pour les otakus! üíñ"
    
    return help_text

# üåê ROUTES FLASK üåê

@app.route("/", methods=['GET'])
def home():
    return jsonify({
        "status": "üéå NakamaBot Otaku Edition is alive! ‚ö°",
        "timestamp": datetime.now().isoformat(),
        "commands_loaded": len(COMMANDS),
        "ai_ready": bool(MISTRAL_API_KEY),
        "ai_provider": "Mistral AI",
        "active_users": len(user_list),
        "memory_enabled": True,
        "google_drive": bool(drive_service),
        "admin_count": len(ADMIN_IDS),
        "security": "Admin-secured broadcast"
    })

@app.route("/webhook", methods=['GET', 'POST'])
def webhook():
    logger.info(f"üì® Webhook appel√© - M√©thode: {request.method}")
    
    if request.method == 'GET':
        mode = request.args.get('hub.mode', '')
        token = request.args.get('hub.verify_token', '')
        challenge = request.args.get('hub.challenge', '')
        
        logger.info(f"üîç V√©rification webhook - mode: {mode}, token match: {token == VERIFY_TOKEN}")
        
        if mode == "subscribe" and token == VERIFY_TOKEN:
            logger.info("‚úÖ Webhook v√©rifi√©!")
            return challenge, 200
        else:
            logger.error("‚ùå √âchec v√©rification webhook")
            return "Verification failed", 403
            
    elif request.method == 'POST':
        try:
            data = request.get_json()
            logger.info(f"üì® Donn√©es re√ßues: {json.dumps(data, indent=2)}")
            
            if not data or 'entry' not in data:
                return jsonify({"error": "Invalid data"}), 400
                
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    sender_id = messaging_event.get('sender', {}).get('id')
                    
                    # Ajouter l'utilisateur √† la liste
                    user_list.add(sender_id)
                    
                    if 'message' in messaging_event:
                        message_data = messaging_event['message']
                        
                        # Ignorer les echos
                        if message_data.get('is_echo'):
                            continue
                            
                        message_text = message_data.get('text', '').strip()
                        logger.info(f"üí¨ Message de {sender_id}: '{message_text}'")
                        
                        # Ajouter le message de l'utilisateur √† la m√©moire
                        add_to_memory(sender_id, 'user', message_text)
                        
                        # Traitement des commandes
                        response_text = process_command(sender_id, message_text)
                        
                        # Ajouter la r√©ponse du bot √† la m√©moire
                        add_to_memory(sender_id, 'bot', response_text)
                        
                        # Envoi de la r√©ponse
                        send_result = send_message(sender_id, response_text)
                        logger.info(f"üì§ Envoi: {send_result}")
                        
        except Exception as e:
            logger.error(f"‚ùå Erreur webhook: {str(e)}")
            return jsonify({"error": str(e)}), 500
            
        return jsonify({"status": "ok"}), 200

def process_command(sender_id, message_text):
    """Traite les commandes de fa√ßon modulaire"""
    
    # Si le message ne commence pas par /, traiter comme /ia
    if not message_text.startswith('/'):
        if message_text.strip():
            return cmd_ia(sender_id, message_text)
        else:
            return "üéå Konnichiwa! Tape /start pour commencer ou /help pour mes commandes! ‚ú®"
    
    # Parser la commande
    parts = message_text[1:].split(' ', 1)
    command_name = parts[0].lower()
    command_args = parts[1] if len(parts) > 1 else ""
    
    logger.info(f"üéØ Commande: {command_name}, Args: {command_args}")
    
    # Ex√©cuter la commande si elle existe
    if command_name in COMMANDS:
        try:
            return COMMANDS[command_name]['function'](sender_id, command_args)
        except Exception as e:
            logger.error(f"‚ùå Erreur commande {command_name}: {e}")
            return f"üí• Oups! Erreur dans /{command_name}. Retry, onegaishimasu! ü•∫"
    else:
        return f"‚ùì Commande /{command_name} inconnue! Tape /help pour voir toutes mes techniques! ‚ö°"

def send_message(recipient_id, text):
    """Envoie un message Facebook avec gestion d'erreurs"""
    if not PAGE_ACCESS_TOKEN:
        logger.error("‚ùå PAGE_ACCESS_TOKEN manquant")
        return {"success": False, "error": "No access token"}
    
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    # Diviser les messages trop longs
    max_length = 2000
    if len(text) > max_length:
        text = text[:max_length-50] + "...\n\n‚ú® Message tronqu√©! üí´"
    
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": text},
        "messaging_type": "RESPONSE"
    }
    
    try:
        response = requests.post(
            url,
            params={"access_token": PAGE_ACCESS_TOKEN},
            headers={"Content-Type": "application/json"},
            json=data,
            timeout=10
        )
        
        logger.info(f"üì§ R√©ponse HTTP: {response.status_code}")
        
        if response.status_code == 200:
            return {"success": True}
        else:
            logger.error(f"‚ùå Erreur envoi: {response.text}")
            return {"success": False, "error": response.text}
            
    except Exception as e:
        logger.error(f"‚ùå Exception envoi: {e}")
        return {"success": False, "error": str(e)}

@app.route("/health", methods=['GET'])
def health_check():
    """Health check avec infos d√©taill√©es"""
    return jsonify({
        "status": "healthy",
        "bot": "NakamaBot Otaku Edition",
        "timestamp": datetime.now().isoformat(),
        "commands_count": len(COMMANDS),
        "commands_list": list(COMMANDS.keys()),
        "mistral_ready": bool(MISTRAL_API_KEY),
        "ai_provider": "Mistral AI",
        "active_users": len(user_list),
        "memory_enabled": True,
        "google_drive_connected": bool(drive_service),
        "admin_security": bool(ADMIN_IDS),
        "config": {
            "verify_token_set": bool(VERIFY_TOKEN),
            "page_token_set": bool(PAGE_ACCESS_TOKEN),
            "mistral_key_set": bool(MISTRAL_API_KEY),
            "drive_credentials_set": bool(GOOGLE_DRIVE_CREDENTIALS),
            "drive_folder_set": bool(DRIVE_FOLDER_ID),
            "admin_ids_set": bool(ADMIN_IDS)
        }
    }), 200

@app.route("/commands", methods=['GET'])
def list_commands():
    """API pour lister toutes les commandes disponibles"""
    commands_info = {}
    for name, info in COMMANDS.items():
        commands_info[name] = {
            'name': name,
            'description': info['description'],
            'admin_only': '[ADMIN' in info['description']
        }
    
    return jsonify({
        "total_commands": len(COMMANDS),
        "commands": commands_info,
        "ai_provider": "Mistral AI",
        "memory_enabled": True,
        "google_drive_enabled": bool(drive_service),
        "admin_security": bool(ADMIN_IDS),
        "active_users": len(user_list)
    })

@app.route("/startup-broadcast", methods=['POST'])
def startup_broadcast():
    """Route pour envoyer le message de mise √† jour au d√©marrage"""
    # V√©rifier si c'est un appel autoris√© (vous pouvez ajouter une cl√© API ici)
    auth_key = request.headers.get('Authorization')
    if auth_key != f"Bearer {VERIFY_TOKEN}":
        return jsonify({"error": "Unauthorized"}), 401
    
    message = "üéå‚ö° MISE √Ä JOUR NAKAMA COMPLETED! ‚ö°üéå\n\n‚ú® Votre NakamaBot pr√©f√©r√© vient d'√™tre upgrad√© par Durand-sensei!\n\nüÜï Nouvelles fonctionnalit√©s:\nüíæ M√©moire persistante (Google Drive)\nüîÑ Continuit√© des histoires permanente\nüîê Syst√®me admin s√©curis√©\nüì¢ Broadcast admin seulement\n\nüöÄ Pr√™t pour de nouvelles aventures otaku!\n\n‚ö° Tape /help pour d√©couvrir toutes mes nouvelles techniques secr√®tes, nakama! üíñ"
    
    result = broadcast_message(message)
    
    return jsonify({
        "status": "broadcast_sent",
        "message": "Mise √† jour annonc√©e",
        "sent_to": result['sent'],
        "total_users": result['total'],
        "google_drive": bool(drive_service),
        "admin_security": bool(ADMIN_IDS)
    })

@app.route("/memory-stats", methods=['GET'])
def memory_stats():
    """Statistiques sur la m√©moire des utilisateurs"""
    stats = {
        "total_users_with_memory": len(user_memory),
        "total_users_active": len(user_list),
        "google_drive_connected": bool(drive_service),
        "last_save_attempt": "Automatic every 5 minutes",
        "memory_details": {}
    }
    
    for user_id, memory in user_memory.items():
        stats["memory_details"][user_id] = {
            "messages_count": len(memory),
            "last_interaction": memory[-1]['timestamp'] if memory else None,
            "is_admin": is_admin(user_id)
        }
    
    return jsonify(stats)

@app.route("/admin-control", methods=['POST'])
def admin_control():
    """API pour les contr√¥les admin externes"""
    data = request.get_json()
    action = data.get('action')
    admin_key = request.headers.get('Admin-Key')
    
    # V√©rification de s√©curit√© simple (vous pouvez am√©liorer ceci)
    if admin_key != VERIFY_TOKEN:
        return jsonify({"error": "Unauthorized admin access"}), 401
    
    if action == "force_save":
        success = save_memory_to_drive()
        return jsonify({"success": success, "message": "Force save attempted"})
    
    elif action == "force_load":
        success = load_memory_from_drive()
        return jsonify({"success": success, "message": "Force load attempted"})
    
    elif action == "get_stats":
        return jsonify({
            "users_count": len(user_list),
            "memory_count": len(user_memory),
            "drive_connected": bool(drive_service),
            "admin_count": len(ADMIN_IDS)
        })
    
    else:
        return jsonify({"error": "Unknown action"}), 400

def send_startup_notification():
    """Envoie automatiquement le message de mise √† jour au d√©marrage"""
    if user_list:  # Seulement s'il y a des utilisateurs
        startup_message = "üéå‚ö° SYST√àME NAKAMA RED√âMARR√â! ‚ö°üéå\n\n‚ú® Durand-sensei vient de mettre √† jour mes circuits!\n\nüÜï Nouvelles capacit√©s d√©bloqu√©es:\nüíæ M√©moire persistante Google Drive\nüîÑ Mode histoire continue permanent\nüîê Syst√®me admin s√©curis√©\nüì¢ Broadcast prot√©g√©\n\nüöÄ Je suis plus kawaii et s√©curis√© que jamais!\n\n‚ö° Pr√™t pour nos prochaines aventures, nakama! üíñ"
        
        result = broadcast_message(startup_message)
        logger.info(f"üöÄ Message de d√©marrage envoy√© √† {result['sent']}/{result['total']} utilisateurs")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    
    logger.info("üöÄ D√©marrage NakamaBot Otaku Edition...")
    
    # Initialiser Google Drive
    drive_initialized = init_google_drive()
    
    # Charger la m√©moire depuis Drive si possible
    if drive_initialized:
        load_success = load_memory_from_drive()
        if load_success:
            logger.info("‚úÖ M√©moire charg√©e depuis Google Drive")
        else:
            logger.info("üìÅ Aucune sauvegarde trouv√©e - D√©marrage avec m√©moire vide")
        
        # D√©marrer la sauvegarde automatique
        auto_save_memory()
    else:
        logger.warning("‚ö†Ô∏è Google Drive non disponible - M√©moire non persistante")
    
    logger.info(f"üéå Commandes charg√©es: {len(COMMANDS)}")
    logger.info(f"üìã Liste: {list(COMMANDS.keys())}")
    logger.info(f"ü§ñ Mistral AI ready: {bool(MISTRAL_API_KEY)}")
    logger.info(f"üíæ Syst√®me de m√©moire: Activ√© (3 messages) {'+ Google Drive' if drive_service else '+ Local seulement'}")
    logger.info(f"üì¢ Syst√®me de broadcast: {'üîê S√©curis√© admin' if ADMIN_IDS else '‚ö†Ô∏è Non s√©curis√©'}")
    logger.info(f"üîê Administrateurs: {len(ADMIN_IDS)} configur√©s")
    logger.info(f"üë• Utilisateurs en m√©moire: {len(user_list)}")
    
    # Envoyer le message de d√©marrage apr√®s un court d√©lai
    def delayed_startup_notification():
        time.sleep(5)  # Attendre 5 secondes que le serveur soit pr√™t
        send_startup_notification()
    
    # Lancer la notification en arri√®re-plan
    notification_thread = threading.Thread(target=delayed_startup_notification)
    notification_thread.daemon = True
    notification_thread.start()
    
    app.run(host="0.0.0.0", port=port, debug=False)
